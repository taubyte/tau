// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: config.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfigService_Load_FullMethodName     = "/config.ConfigService/Load"
	ConfigService_Upload_FullMethodName   = "/config.ConfigService/Upload"
	ConfigService_Download_FullMethodName = "/config.ConfigService/Download"
	ConfigService_Commit_FullMethodName   = "/config.ConfigService/Commit"
	ConfigService_Free_FullMethodName     = "/config.ConfigService/Free"
	ConfigService_Do_FullMethodName       = "/config.ConfigService/Do"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service
type ConfigServiceClient interface {
	Load(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Config, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SourceUpload, Config], error)
	Download(ctx context.Context, in *BundleConfig, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Bundle], error)
	Commit(ctx context.Context, in *BundleConfig, opts ...grpc.CallOption) (*Empty, error)
	Free(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Empty, error)
	Do(ctx context.Context, in *Op, opts ...grpc.CallOption) (*Return, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) Load(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Config, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Config)
	err := c.cc.Invoke(ctx, ConfigService_Load_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SourceUpload, Config], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConfigService_ServiceDesc.Streams[0], ConfigService_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SourceUpload, Config]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfigService_UploadClient = grpc.ClientStreamingClient[SourceUpload, Config]

func (c *configServiceClient) Download(ctx context.Context, in *BundleConfig, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Bundle], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConfigService_ServiceDesc.Streams[1], ConfigService_Download_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BundleConfig, Bundle]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfigService_DownloadClient = grpc.ServerStreamingClient[Bundle]

func (c *configServiceClient) Commit(ctx context.Context, in *BundleConfig, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ConfigService_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Free(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ConfigService_Free_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Do(ctx context.Context, in *Op, opts ...grpc.CallOption) (*Return, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Return)
	err := c.cc.Invoke(ctx, ConfigService_Do_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations must embed UnimplementedConfigServiceServer
// for forward compatibility.
//
// Service
type ConfigServiceServer interface {
	Load(context.Context, *Source) (*Config, error)
	Upload(grpc.ClientStreamingServer[SourceUpload, Config]) error
	Download(*BundleConfig, grpc.ServerStreamingServer[Bundle]) error
	Commit(context.Context, *BundleConfig) (*Empty, error)
	Free(context.Context, *Config) (*Empty, error)
	Do(context.Context, *Op) (*Return, error)
	mustEmbedUnimplementedConfigServiceServer()
}

// UnimplementedConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigServiceServer struct{}

func (UnimplementedConfigServiceServer) Load(context.Context, *Source) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedConfigServiceServer) Upload(grpc.ClientStreamingServer[SourceUpload, Config]) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedConfigServiceServer) Download(*BundleConfig, grpc.ServerStreamingServer[Bundle]) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedConfigServiceServer) Commit(context.Context, *BundleConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedConfigServiceServer) Free(context.Context, *Config) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Free not implemented")
}
func (UnimplementedConfigServiceServer) Do(context.Context, *Op) (*Return, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (UnimplementedConfigServiceServer) mustEmbedUnimplementedConfigServiceServer() {}
func (UnimplementedConfigServiceServer) testEmbeddedByValue()                       {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_Load_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Load(ctx, req.(*Source))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConfigServiceServer).Upload(&grpc.GenericServerStream[SourceUpload, Config]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfigService_UploadServer = grpc.ClientStreamingServer[SourceUpload, Config]

func _ConfigService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BundleConfig)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigServiceServer).Download(m, &grpc.GenericServerStream[BundleConfig, Bundle]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfigService_DownloadServer = grpc.ServerStreamingServer[Bundle]

func _ConfigService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BundleConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Commit(ctx, req.(*BundleConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Free_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Free(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_Free_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Free(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Op)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_Do_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Do(ctx, req.(*Op))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Load",
			Handler:    _ConfigService_Load_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _ConfigService_Commit_Handler,
		},
		{
			MethodName: "Free",
			Handler:    _ConfigService_Free_Handler,
		},
		{
			MethodName: "Do",
			Handler:    _ConfigService_Do_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _ConfigService_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _ConfigService_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}
