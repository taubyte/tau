// @generated by protoc-gen-es v1.4.0 with parameter "target=ts"
// @generated from file taucorder/v1/swarm.proto (package taucorder.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Node } from "./common_pb.js";

/**
 * Data Structures
 *
 * @generated from message taucorder.v1.WaitRequest
 */
export class WaitRequest extends Message<WaitRequest> {
  /**
   * @generated from field: taucorder.v1.Node node = 1;
   */
  node?: Node;

  /**
   * nanoseconds
   *
   * @generated from field: int64 timeout = 2;
   */
  timeout = protoInt64.zero;

  constructor(data?: PartialMessage<WaitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.WaitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "timeout", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WaitRequest {
    return new WaitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WaitRequest {
    return new WaitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WaitRequest {
    return new WaitRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WaitRequest | PlainMessage<WaitRequest> | undefined, b: WaitRequest | PlainMessage<WaitRequest> | undefined): boolean {
    return proto3.util.equals(WaitRequest, a, b);
  }
}

/**
 * @generated from message taucorder.v1.ListPingRequest
 */
export class ListPingRequest extends Message<ListPingRequest> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0;

  /**
   * just a suggestion, service can change value
   *
   * @generated from field: int32 concurrency = 2;
   */
  concurrency = 0;

  constructor(data?: PartialMessage<ListPingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.ListPingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "concurrency", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPingRequest {
    return new ListPingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPingRequest {
    return new ListPingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPingRequest {
    return new ListPingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPingRequest | PlainMessage<ListPingRequest> | undefined, b: ListPingRequest | PlainMessage<ListPingRequest> | undefined): boolean {
    return proto3.util.equals(ListPingRequest, a, b);
  }
}

/**
 * @generated from message taucorder.v1.ListRequest
 */
export class ListRequest extends Message<ListRequest> {
  /**
   * @generated from field: taucorder.v1.Node node = 1;
   */
  node?: Node;

  /**
   * nanoseconds
   *
   * @generated from field: int64 timeout = 2;
   */
  timeout = protoInt64.zero;

  /**
   * @generated from field: taucorder.v1.ListPingRequest ping = 3;
   */
  ping?: ListPingRequest;

  constructor(data?: PartialMessage<ListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.ListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "timeout", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ping", kind: "message", T: ListPingRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRequest {
    return new ListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRequest | PlainMessage<ListRequest> | undefined, b: ListRequest | PlainMessage<ListRequest> | undefined): boolean {
    return proto3.util.equals(ListRequest, a, b);
  }
}

/**
 * @generated from message taucorder.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  /**
   * @generated from field: taucorder.v1.Node node = 1;
   */
  node?: Node;

  /**
   * must be connected to peer
   *
   * @generated from field: string pid = 2;
   */
  pid = "";

  /**
   * nanoseconds
   *
   * @generated from field: int64 timeout = 3;
   */
  timeout = protoInt64.zero;

  /**
   * @generated from field: int32 count = 4;
   */
  count = 0;

  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "pid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timeout", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message taucorder.v1.ConnectRequest
 */
export class ConnectRequest extends Message<ConnectRequest> {
  /**
   * @generated from field: taucorder.v1.Node node = 1;
   */
  node?: Node;

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * nanoseconds
   *
   * @generated from field: int64 timeout = 3;
   */
  timeout = protoInt64.zero;

  constructor(data?: PartialMessage<ConnectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.ConnectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timeout", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectRequest {
    return new ConnectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectRequest {
    return new ConnectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectRequest {
    return new ConnectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectRequest | PlainMessage<ConnectRequest> | undefined, b: ConnectRequest | PlainMessage<ConnectRequest> | undefined): boolean {
    return proto3.util.equals(ConnectRequest, a, b);
  }
}

/**
 * @generated from message taucorder.v1.DiscoverRequest
 */
export class DiscoverRequest extends Message<DiscoverRequest> {
  /**
   * @generated from field: taucorder.v1.Node node = 1;
   */
  node?: Node;

  /**
   * @generated from field: string service = 2;
   */
  service = "";

  /**
   * nanoseconds
   *
   * @generated from field: int64 timeout = 3;
   */
  timeout = protoInt64.zero;

  /**
   * max count
   *
   * @generated from field: int32 count = 4;
   */
  count = 0;

  constructor(data?: PartialMessage<DiscoverRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.DiscoverRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timeout", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoverRequest {
    return new DiscoverRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoverRequest {
    return new DiscoverRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoverRequest {
    return new DiscoverRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoverRequest | PlainMessage<DiscoverRequest> | undefined, b: DiscoverRequest | PlainMessage<DiscoverRequest> | undefined): boolean {
    return proto3.util.equals(DiscoverRequest, a, b);
  }
}

