// @generated by protoc-gen-es v1.4.0 with parameter "target=ts"
// @generated from file taucorder/v1/hoarder.proto (package taucorder.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Node, Peer } from "./common_pb.js";

/**
 * Data Structures
 *
 * @generated from message taucorder.v1.StashRequest
 */
export class StashRequest extends Message<StashRequest> {
  /**
   * @generated from field: taucorder.v1.Node node = 1;
   */
  node?: Node;

  /**
   * @generated from field: string cid = 2;
   */
  cid = "";

  /**
   * @generated from field: repeated taucorder.v1.Peer providers = 3;
   */
  providers: Peer[] = [];

  constructor(data?: PartialMessage<StashRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.StashRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "providers", kind: "message", T: Peer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StashRequest {
    return new StashRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StashRequest {
    return new StashRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StashRequest {
    return new StashRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StashRequest | PlainMessage<StashRequest> | undefined, b: StashRequest | PlainMessage<StashRequest> | undefined): boolean {
    return proto3.util.equals(StashRequest, a, b);
  }
}

/**
 * @generated from message taucorder.v1.StashedItems
 */
export class StashedItems extends Message<StashedItems> {
  /**
   * @generated from field: repeated taucorder.v1.StashedItem items = 2;
   */
  items: StashedItem[] = [];

  constructor(data?: PartialMessage<StashedItems>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.StashedItems";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "items", kind: "message", T: StashedItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StashedItems {
    return new StashedItems().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StashedItems {
    return new StashedItems().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StashedItems {
    return new StashedItems().fromJsonString(jsonString, options);
  }

  static equals(a: StashedItems | PlainMessage<StashedItems> | undefined, b: StashedItems | PlainMessage<StashedItems> | undefined): boolean {
    return proto3.util.equals(StashedItems, a, b);
  }
}

/**
 * @generated from message taucorder.v1.StashedItem
 */
export class StashedItem extends Message<StashedItem> {
  /**
   * @generated from field: string cid = 1;
   */
  cid = "";

  constructor(data?: PartialMessage<StashedItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.StashedItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StashedItem {
    return new StashedItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StashedItem {
    return new StashedItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StashedItem {
    return new StashedItem().fromJsonString(jsonString, options);
  }

  static equals(a: StashedItem | PlainMessage<StashedItem> | undefined, b: StashedItem | PlainMessage<StashedItem> | undefined): boolean {
    return proto3.util.equals(StashedItem, a, b);
  }
}

