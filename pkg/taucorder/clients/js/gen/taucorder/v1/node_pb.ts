// @generated by protoc-gen-es v1.4.0 with parameter "target=ts"
// @generated from file taucorder/v1/node.proto (package taucorder.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Addresses } from "./common_pb.js";

/**
 * Data Structures
 *
 * @generated from message taucorder.v1.Link
 */
export class Link extends Message<Link> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * falls back to auto if true
   *
   * @generated from field: bool auto = 2;
   */
  auto = false;

  constructor(data?: PartialMessage<Link>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.Link";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "auto", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Link {
    return new Link().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Link {
    return new Link().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Link {
    return new Link().fromJsonString(jsonString, options);
  }

  static equals(a: Link | PlainMessage<Link> | undefined, b: Link | PlainMessage<Link> | undefined): boolean {
    return proto3.util.equals(Link, a, b);
  }
}

/**
 * @generated from message taucorder.v1.SporeDrive
 */
export class SporeDrive extends Message<SporeDrive> {
  /**
   * @generated from field: string config_id = 1;
   */
  configId = "";

  /**
   * @generated from field: taucorder.v1.Link connect = 2;
   */
  connect?: Link;

  constructor(data?: PartialMessage<SporeDrive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.SporeDrive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connect", kind: "message", T: Link },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SporeDrive {
    return new SporeDrive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SporeDrive {
    return new SporeDrive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SporeDrive {
    return new SporeDrive().fromJsonString(jsonString, options);
  }

  static equals(a: SporeDrive | PlainMessage<SporeDrive> | undefined, b: SporeDrive | PlainMessage<SporeDrive> | undefined): boolean {
    return proto3.util.equals(SporeDrive, a, b);
  }
}

/**
 * @generated from message taucorder.v1.Dream
 */
export class Dream extends Message<Dream> {
  /**
   * @generated from field: string universe = 1;
   */
  universe = "";

  /**
   * @generated from field: taucorder.v1.Link connect = 2;
   */
  connect?: Link;

  /**
   * @generated from field: bytes swarm_key = 3;
   */
  swarmKey = new Uint8Array(0);

  /**
   * @generated from oneof taucorder.v1.Dream.bootstrap
   */
  bootstrap: {
    /**
     * @generated from field: bool disable = 4;
     */
    value: boolean;
    case: "disable";
  } | {
    /**
     * @generated from field: taucorder.v1.Addresses addresses = 5;
     */
    value: Addresses;
    case: "addresses";
  } | {
    /**
     * [0,1] subset of nodes when connecting
     *
     * @generated from field: float subset_percentage = 6;
     */
    value: number;
    case: "subsetPercentage";
  } | {
    /**
     * subset of nodes when connecting
     *
     * @generated from field: int32 subset_count = 7;
     */
    value: number;
    case: "subsetCount";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Dream>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.Dream";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "universe", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connect", kind: "message", T: Link },
    { no: 3, name: "swarm_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "disable", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "bootstrap" },
    { no: 5, name: "addresses", kind: "message", T: Addresses, oneof: "bootstrap" },
    { no: 6, name: "subset_percentage", kind: "scalar", T: 2 /* ScalarType.FLOAT */, oneof: "bootstrap" },
    { no: 7, name: "subset_count", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "bootstrap" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Dream {
    return new Dream().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Dream {
    return new Dream().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Dream {
    return new Dream().fromJsonString(jsonString, options);
  }

  static equals(a: Dream | PlainMessage<Dream> | undefined, b: Dream | PlainMessage<Dream> | undefined): boolean {
    return proto3.util.equals(Dream, a, b);
  }
}

/**
 * @generated from message taucorder.v1.Raw
 */
export class Raw extends Message<Raw> {
  /**
   * @generated from field: bytes swarm_key = 1;
   */
  swarmKey = new Uint8Array(0);

  /**
   * @generated from field: repeated string peers = 2;
   */
  peers: string[] = [];

  constructor(data?: PartialMessage<Raw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.Raw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "swarm_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "peers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Raw {
    return new Raw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Raw {
    return new Raw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Raw {
    return new Raw().fromJsonString(jsonString, options);
  }

  static equals(a: Raw | PlainMessage<Raw> | undefined, b: Raw | PlainMessage<Raw> | undefined): boolean {
    return proto3.util.equals(Raw, a, b);
  }
}

/**
 * @generated from message taucorder.v1.Config
 */
export class Config extends Message<Config> {
  /**
   * @generated from oneof taucorder.v1.Config.source
   */
  source: {
    /**
     * @generated from field: taucorder.v1.SporeDrive cloud = 1;
     */
    value: SporeDrive;
    case: "cloud";
  } | {
    /**
     * @generated from field: taucorder.v1.Dream universe = 2;
     */
    value: Dream;
    case: "universe";
  } | {
    /**
     * @generated from field: taucorder.v1.Raw raw = 3;
     */
    value: Raw;
    case: "raw";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: bytes private_key = 4;
   */
  privateKey = new Uint8Array(0);

  constructor(data?: PartialMessage<Config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.Config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cloud", kind: "message", T: SporeDrive, oneof: "source" },
    { no: 2, name: "universe", kind: "message", T: Dream, oneof: "source" },
    { no: 3, name: "raw", kind: "message", T: Raw, oneof: "source" },
    { no: 4, name: "private_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Config {
    return new Config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJsonString(jsonString, options);
  }

  static equals(a: Config | PlainMessage<Config> | undefined, b: Config | PlainMessage<Config> | undefined): boolean {
    return proto3.util.equals(Config, a, b);
  }
}

