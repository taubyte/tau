// @generated by protoc-gen-connect-es v1.4.0 with parameter "target=ts"
// @generated from file taucorder/v1/auth.proto (package taucorder.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ConsensusState, ConsensusStateRequest, DiscoverServiceRequest, Empty, Node, Peer } from "./common_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { ByHookRequest, ByProjectRequest, ByRepositoryRequest, Hook, Project, ProjectRepo, X509Certificate, X509CertificateRequest } from "./auth_pb.js";

/**
 * Service
 *
 * @generated from service taucorder.v1.AuthService
 */
export const AuthService = {
  typeName: "taucorder.v1.AuthService",
  methods: {
    /**
     * @generated from rpc taucorder.v1.AuthService.List
     */
    list: {
      name: "List",
      I: Node,
      O: Peer,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc taucorder.v1.AuthService.Discover
     */
    discover: {
      name: "Discover",
      I: DiscoverServiceRequest,
      O: Peer,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc taucorder.v1.AuthService.State
     */
    state: {
      name: "State",
      I: ConsensusStateRequest,
      O: ConsensusState,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc taucorder.v1.AuthService.States
     */
    states: {
      name: "States",
      I: Node,
      O: ConsensusState,
      kind: MethodKind.ServerStreaming,
    },
  }
} as const;

/**
 * @generated from service taucorder.v1.ProjectsInAuthService
 */
export const ProjectsInAuthService = {
  typeName: "taucorder.v1.ProjectsInAuthService",
  methods: {
    /**
     * @generated from rpc taucorder.v1.ProjectsInAuthService.List
     */
    list: {
      name: "List",
      I: Node,
      O: Project,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc taucorder.v1.ProjectsInAuthService.Get
     */
    get: {
      name: "Get",
      I: ByProjectRequest,
      O: Project,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * @generated from service taucorder.v1.RepositoriesInAuthService
 */
export const RepositoriesInAuthService = {
  typeName: "taucorder.v1.RepositoriesInAuthService",
  methods: {
    /**
     * @generated from rpc taucorder.v1.RepositoriesInAuthService.List
     */
    list: {
      name: "List",
      I: Node,
      O: ProjectRepo,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc taucorder.v1.RepositoriesInAuthService.Get
     */
    get: {
      name: "Get",
      I: ByRepositoryRequest,
      O: ProjectRepo,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * @generated from service taucorder.v1.GitHooksInAuthService
 */
export const GitHooksInAuthService = {
  typeName: "taucorder.v1.GitHooksInAuthService",
  methods: {
    /**
     * @generated from rpc taucorder.v1.GitHooksInAuthService.List
     */
    list: {
      name: "List",
      I: Node,
      O: Hook,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc taucorder.v1.GitHooksInAuthService.Get
     */
    get: {
      name: "Get",
      I: ByHookRequest,
      O: Hook,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * @generated from service taucorder.v1.X509InAuthService
 */
export const X509InAuthService = {
  typeName: "taucorder.v1.X509InAuthService",
  methods: {
    /**
     * @generated from rpc taucorder.v1.X509InAuthService.List
     */
    list: {
      name: "List",
      I: Node,
      O: X509Certificate,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc taucorder.v1.X509InAuthService.Get
     */
    get: {
      name: "Get",
      I: X509CertificateRequest,
      O: X509Certificate,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc taucorder.v1.X509InAuthService.Set
     */
    set: {
      name: "Set",
      I: X509CertificateRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc taucorder.v1.X509InAuthService.Delete
     */
    delete: {
      name: "Delete",
      I: X509CertificateRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
  }
} as const;

