// @generated by protoc-gen-es v1.4.0 with parameter "target=ts"
// @generated from file taucorder/v1/patrick.proto (package taucorder.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Node, RepositoryId } from "./common_pb.js";

/**
 * Data Structures
 *
 * @generated from message taucorder.v1.Job
 */
export class Job extends Message<Job> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int64 timestamp = 2;
   */
  timestamp = protoInt64.zero;

  /**
   * @generated from field: int32 status = 3;
   */
  status = 0;

  /**
   * @generated from field: repeated taucorder.v1.JobLog logs = 4;
   */
  logs: JobLog[] = [];

  /**
   * @generated from field: taucorder.v1.JobMeta meta = 5;
   */
  meta?: JobMeta;

  /**
   * @generated from field: repeated taucorder.v1.JobAsset assets = 6;
   */
  assets: JobAsset[] = [];

  /**
   * @generated from field: int32 attempt = 7;
   */
  attempt = 0;

  /**
   * @generated from field: int64 delay = 8;
   */
  delay = protoInt64.zero;

  constructor(data?: PartialMessage<Job>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.Job";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "logs", kind: "message", T: JobLog, repeated: true },
    { no: 5, name: "meta", kind: "message", T: JobMeta },
    { no: 6, name: "assets", kind: "message", T: JobAsset, repeated: true },
    { no: 7, name: "attempt", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "delay", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Job {
    return new Job().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Job {
    return new Job().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Job {
    return new Job().fromJsonString(jsonString, options);
  }

  static equals(a: Job | PlainMessage<Job> | undefined, b: Job | PlainMessage<Job> | undefined): boolean {
    return proto3.util.equals(Job, a, b);
  }
}

/**
 * @generated from message taucorder.v1.JobLog
 */
export class JobLog extends Message<JobLog> {
  /**
   * @generated from field: int64 timestamp = 1;
   */
  timestamp = protoInt64.zero;

  /**
   * @generated from field: string cid = 2;
   */
  cid = "";

  constructor(data?: PartialMessage<JobLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.JobLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobLog {
    return new JobLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobLog {
    return new JobLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobLog {
    return new JobLog().fromJsonString(jsonString, options);
  }

  static equals(a: JobLog | PlainMessage<JobLog> | undefined, b: JobLog | PlainMessage<JobLog> | undefined): boolean {
    return proto3.util.equals(JobLog, a, b);
  }
}

/**
 * @generated from message taucorder.v1.JobMeta
 */
export class JobMeta extends Message<JobMeta> {
  /**
   * @generated from field: string ref = 1;
   */
  ref = "";

  /**
   * @generated from field: string before = 2;
   */
  before = "";

  /**
   * @generated from field: string after = 3;
   */
  after = "";

  /**
   * @generated from field: string head_commit = 4;
   */
  headCommit = "";

  /**
   * @generated from field: taucorder.v1.JobRepository repository = 5;
   */
  repository?: JobRepository;

  constructor(data?: PartialMessage<JobMeta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.JobMeta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "before", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "after", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "head_commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "repository", kind: "message", T: JobRepository },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobMeta {
    return new JobMeta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobMeta {
    return new JobMeta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobMeta {
    return new JobMeta().fromJsonString(jsonString, options);
  }

  static equals(a: JobMeta | PlainMessage<JobMeta> | undefined, b: JobMeta | PlainMessage<JobMeta> | undefined): boolean {
    return proto3.util.equals(JobMeta, a, b);
  }
}

/**
 * @generated from message taucorder.v1.JobRepository
 */
export class JobRepository extends Message<JobRepository> {
  /**
   * @generated from field: taucorder.v1.RepositoryId id = 1;
   */
  id?: RepositoryId;

  /**
   * @generated from field: string ssh_url = 2;
   */
  sshUrl = "";

  /**
   * @generated from field: string branch = 3;
   */
  branch = "";

  constructor(data?: PartialMessage<JobRepository>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.JobRepository";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: RepositoryId },
    { no: 2, name: "ssh_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobRepository {
    return new JobRepository().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobRepository {
    return new JobRepository().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobRepository {
    return new JobRepository().fromJsonString(jsonString, options);
  }

  static equals(a: JobRepository | PlainMessage<JobRepository> | undefined, b: JobRepository | PlainMessage<JobRepository> | undefined): boolean {
    return proto3.util.equals(JobRepository, a, b);
  }
}

/**
 * @generated from message taucorder.v1.JobAsset
 */
export class JobAsset extends Message<JobAsset> {
  /**
   * @generated from field: string ressource_id = 1;
   */
  ressourceId = "";

  /**
   * @generated from field: string cid = 2;
   */
  cid = "";

  constructor(data?: PartialMessage<JobAsset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.JobAsset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ressource_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobAsset {
    return new JobAsset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobAsset {
    return new JobAsset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobAsset {
    return new JobAsset().fromJsonString(jsonString, options);
  }

  static equals(a: JobAsset | PlainMessage<JobAsset> | undefined, b: JobAsset | PlainMessage<JobAsset> | undefined): boolean {
    return proto3.util.equals(JobAsset, a, b);
  }
}

/**
 * @generated from message taucorder.v1.GetJobRequest
 */
export class GetJobRequest extends Message<GetJobRequest> {
  /**
   * @generated from field: taucorder.v1.Node node = 1;
   */
  node?: Node;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetJobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.GetJobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetJobRequest {
    return new GetJobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetJobRequest {
    return new GetJobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetJobRequest {
    return new GetJobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetJobRequest | PlainMessage<GetJobRequest> | undefined, b: GetJobRequest | PlainMessage<GetJobRequest> | undefined): boolean {
    return proto3.util.equals(GetJobRequest, a, b);
  }
}

