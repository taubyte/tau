// @generated by protoc-gen-es v1.4.0 with parameter "target=ts"
// @generated from file taucorder/v1/seer.proto (package taucorder.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Node, Peer, Peers } from "./common_pb.js";

/**
 * Data Structures
 *
 * @generated from message taucorder.v1.NodesListRequest
 */
export class NodesListRequest extends Message<NodesListRequest> {
  /**
   * @generated from field: taucorder.v1.Node node = 1;
   */
  node?: Node;

  /**
   * @generated from field: string service = 2;
   */
  service = "";

  constructor(data?: PartialMessage<NodesListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.NodesListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodesListRequest {
    return new NodesListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodesListRequest {
    return new NodesListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodesListRequest {
    return new NodesListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NodesListRequest | PlainMessage<NodesListRequest> | undefined, b: NodesListRequest | PlainMessage<NodesListRequest> | undefined): boolean {
    return proto3.util.equals(NodesListRequest, a, b);
  }
}

/**
 * @generated from message taucorder.v1.NodesUsageRequest
 */
export class NodesUsageRequest extends Message<NodesUsageRequest> {
  /**
   * @generated from field: taucorder.v1.Node node = 1;
   */
  node?: Node;

  /**
   * @generated from field: string peer = 2;
   */
  peer = "";

  constructor(data?: PartialMessage<NodesUsageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.NodesUsageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "peer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodesUsageRequest {
    return new NodesUsageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodesUsageRequest {
    return new NodesUsageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodesUsageRequest {
    return new NodesUsageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NodesUsageRequest | PlainMessage<NodesUsageRequest> | undefined, b: NodesUsageRequest | PlainMessage<NodesUsageRequest> | undefined): boolean {
    return proto3.util.equals(NodesUsageRequest, a, b);
  }
}

/**
 * @generated from message taucorder.v1.LocationArea
 */
export class LocationArea extends Message<LocationArea> {
  /**
   * @generated from field: taucorder.v1.Location location = 1;
   */
  location?: Location;

  /**
   * @generated from field: float distance = 2;
   */
  distance = 0;

  constructor(data?: PartialMessage<LocationArea>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.LocationArea";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "location", kind: "message", T: Location },
    { no: 2, name: "distance", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationArea {
    return new LocationArea().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationArea {
    return new LocationArea().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationArea {
    return new LocationArea().fromJsonString(jsonString, options);
  }

  static equals(a: LocationArea | PlainMessage<LocationArea> | undefined, b: LocationArea | PlainMessage<LocationArea> | undefined): boolean {
    return proto3.util.equals(LocationArea, a, b);
  }
}

/**
 * @generated from message taucorder.v1.Location
 */
export class Location extends Message<Location> {
  /**
   * @generated from field: float latitude = 1;
   */
  latitude = 0;

  /**
   * @generated from field: float longitude = 2;
   */
  longitude = 0;

  constructor(data?: PartialMessage<Location>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.Location";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "latitude", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "longitude", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Location {
    return new Location().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJsonString(jsonString, options);
  }

  static equals(a: Location | PlainMessage<Location> | undefined, b: Location | PlainMessage<Location> | undefined): boolean {
    return proto3.util.equals(Location, a, b);
  }
}

/**
 * @generated from message taucorder.v1.PeerLocation
 */
export class PeerLocation extends Message<PeerLocation> {
  /**
   * @generated from field: taucorder.v1.Peer peer = 1;
   */
  peer?: Peer;

  /**
   * @generated from field: taucorder.v1.Location location = 2;
   */
  location?: Location;

  constructor(data?: PartialMessage<PeerLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.PeerLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "peer", kind: "message", T: Peer },
    { no: 2, name: "location", kind: "message", T: Location },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeerLocation {
    return new PeerLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeerLocation {
    return new PeerLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeerLocation {
    return new PeerLocation().fromJsonString(jsonString, options);
  }

  static equals(a: PeerLocation | PlainMessage<PeerLocation> | undefined, b: PeerLocation | PlainMessage<PeerLocation> | undefined): boolean {
    return proto3.util.equals(PeerLocation, a, b);
  }
}

/**
 * @generated from message taucorder.v1.LocationRequest
 */
export class LocationRequest extends Message<LocationRequest> {
  /**
   * @generated from field: taucorder.v1.Node node = 1;
   */
  node?: Node;

  /**
   * @generated from oneof taucorder.v1.LocationRequest.filter
   */
  filter: {
    /**
     * @generated from field: bool all = 2;
     */
    value: boolean;
    case: "all";
  } | {
    /**
     * @generated from field: taucorder.v1.LocationArea area = 3;
     */
    value: LocationArea;
    case: "area";
  } | {
    /**
     * @generated from field: taucorder.v1.Peers peers = 4;
     */
    value: Peers;
    case: "peers";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<LocationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.LocationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "all", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "filter" },
    { no: 3, name: "area", kind: "message", T: LocationArea, oneof: "filter" },
    { no: 4, name: "peers", kind: "message", T: Peers, oneof: "filter" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationRequest {
    return new LocationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationRequest {
    return new LocationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationRequest {
    return new LocationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LocationRequest | PlainMessage<LocationRequest> | undefined, b: LocationRequest | PlainMessage<LocationRequest> | undefined): boolean {
    return proto3.util.equals(LocationRequest, a, b);
  }
}

/**
 * @generated from message taucorder.v1.PeerUsage
 */
export class PeerUsage extends Message<PeerUsage> {
  /**
   * @generated from field: taucorder.v1.Peer peer = 1;
   */
  peer?: Peer;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated string types = 3;
   */
  types: string[] = [];

  /**
   * @generated from field: string address = 4;
   */
  address = "";

  /**
   * @generated from field: int64 timestamp = 5;
   */
  timestamp = protoInt64.zero;

  /**
   * @generated from field: int64 used_mem = 6;
   */
  usedMem = protoInt64.zero;

  /**
   * @generated from field: int64 total_mem = 7;
   */
  totalMem = protoInt64.zero;

  /**
   * @generated from field: int64 free_mem = 8;
   */
  freeMem = protoInt64.zero;

  /**
   * @generated from field: int64 total_cpu = 9;
   */
  totalCpu = protoInt64.zero;

  /**
   * @generated from field: int64 cpu_count = 10;
   */
  cpuCount = protoInt64.zero;

  /**
   * @generated from field: int64 cpu_user = 11;
   */
  cpuUser = protoInt64.zero;

  /**
   * @generated from field: int64 cpu_nice = 12;
   */
  cpuNice = protoInt64.zero;

  /**
   * @generated from field: int64 cpu_system = 13;
   */
  cpuSystem = protoInt64.zero;

  /**
   * @generated from field: int64 cpu_idle = 14;
   */
  cpuIdle = protoInt64.zero;

  /**
   * @generated from field: int64 cpu_iowait = 15;
   */
  cpuIowait = protoInt64.zero;

  /**
   * @generated from field: int64 cpu_irq = 16;
   */
  cpuIrq = protoInt64.zero;

  /**
   * @generated from field: int64 cpu_softirq = 17;
   */
  cpuSoftirq = protoInt64.zero;

  /**
   * @generated from field: int64 cpu_steal = 18;
   */
  cpuSteal = protoInt64.zero;

  /**
   * @generated from field: int64 cpu_guest = 19;
   */
  cpuGuest = protoInt64.zero;

  /**
   * @generated from field: int64 cpu_guest_nice = 20;
   */
  cpuGuestNice = protoInt64.zero;

  /**
   * @generated from field: int64 cpu_stat_count = 21;
   */
  cpuStatCount = protoInt64.zero;

  /**
   * @generated from field: int64 total_disk = 22;
   */
  totalDisk = protoInt64.zero;

  /**
   * @generated from field: int64 free_disk = 23;
   */
  freeDisk = protoInt64.zero;

  /**
   * @generated from field: int64 used_disk = 24;
   */
  usedDisk = protoInt64.zero;

  /**
   * @generated from field: int64 available_disk = 25;
   */
  availableDisk = protoInt64.zero;

  constructor(data?: PartialMessage<PeerUsage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.PeerUsage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "peer", kind: "message", T: Peer },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "used_mem", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "total_mem", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "free_mem", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "total_cpu", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "cpu_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "cpu_user", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "cpu_nice", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "cpu_system", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "cpu_idle", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "cpu_iowait", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "cpu_irq", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 17, name: "cpu_softirq", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "cpu_steal", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 19, name: "cpu_guest", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "cpu_guest_nice", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 21, name: "cpu_stat_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "total_disk", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "free_disk", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 24, name: "used_disk", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 25, name: "available_disk", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeerUsage {
    return new PeerUsage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeerUsage {
    return new PeerUsage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeerUsage {
    return new PeerUsage().fromJsonString(jsonString, options);
  }

  static equals(a: PeerUsage | PlainMessage<PeerUsage> | undefined, b: PeerUsage | PlainMessage<PeerUsage> | undefined): boolean {
    return proto3.util.equals(PeerUsage, a, b);
  }
}

