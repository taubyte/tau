// @generated by protoc-gen-es v1.4.0 with parameter "target=ts"
// @generated from file taucorder/v1/common.proto (package taucorder.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message taucorder.v1.Empty
 */
export class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.Empty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty {
    return new Empty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJsonString(jsonString, options);
  }

  static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean {
    return proto3.util.equals(Empty, a, b);
  }
}

/**
 * @generated from message taucorder.v1.Node
 */
export class Node extends Message<Node> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<Node>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.Node";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node {
    return new Node().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJsonString(jsonString, options);
  }

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean {
    return proto3.util.equals(Node, a, b);
  }
}

/**
 * @generated from message taucorder.v1.Addresses
 */
export class Addresses extends Message<Addresses> {
  /**
   * @generated from field: repeated string multiaddr = 1;
   */
  multiaddr: string[] = [];

  constructor(data?: PartialMessage<Addresses>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.Addresses";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "multiaddr", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Addresses {
    return new Addresses().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Addresses {
    return new Addresses().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Addresses {
    return new Addresses().fromJsonString(jsonString, options);
  }

  static equals(a: Addresses | PlainMessage<Addresses> | undefined, b: Addresses | PlainMessage<Addresses> | undefined): boolean {
    return proto3.util.equals(Addresses, a, b);
  }
}

/**
 * @generated from message taucorder.v1.PingStatus
 */
export class PingStatus extends Message<PingStatus> {
  /**
   * @generated from field: bool up = 1;
   */
  up = false;

  /**
   * @generated from field: int32 count = 2;
   */
  count = 0;

  /**
   * @generated from field: int32 count_total = 3;
   */
  countTotal = 0;

  /**
   * @generated from field: int64 latency = 4;
   */
  latency = protoInt64.zero;

  constructor(data?: PartialMessage<PingStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.PingStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "up", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "count_total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "latency", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingStatus {
    return new PingStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingStatus {
    return new PingStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingStatus {
    return new PingStatus().fromJsonString(jsonString, options);
  }

  static equals(a: PingStatus | PlainMessage<PingStatus> | undefined, b: PingStatus | PlainMessage<PingStatus> | undefined): boolean {
    return proto3.util.equals(PingStatus, a, b);
  }
}

/**
 * @generated from message taucorder.v1.Peer
 */
export class Peer extends Message<Peer> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated string addresses = 2;
   */
  addresses: string[] = [];

  /**
   * did it respond to ping
   *
   * @generated from field: taucorder.v1.PingStatus ping_status = 3;
   */
  pingStatus?: PingStatus;

  constructor(data?: PartialMessage<Peer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.Peer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "ping_status", kind: "message", T: PingStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Peer {
    return new Peer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Peer {
    return new Peer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Peer {
    return new Peer().fromJsonString(jsonString, options);
  }

  static equals(a: Peer | PlainMessage<Peer> | undefined, b: Peer | PlainMessage<Peer> | undefined): boolean {
    return proto3.util.equals(Peer, a, b);
  }
}

/**
 * @generated from message taucorder.v1.DiscoverServiceRequest
 */
export class DiscoverServiceRequest extends Message<DiscoverServiceRequest> {
  /**
   * @generated from field: taucorder.v1.Node node = 1;
   */
  node?: Node;

  /**
   * @generated from field: int64 timeout = 2;
   */
  timeout = protoInt64.zero;

  /**
   * max count
   *
   * @generated from field: int64 count = 3;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<DiscoverServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.DiscoverServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "timeout", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoverServiceRequest {
    return new DiscoverServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoverServiceRequest {
    return new DiscoverServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoverServiceRequest {
    return new DiscoverServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoverServiceRequest | PlainMessage<DiscoverServiceRequest> | undefined, b: DiscoverServiceRequest | PlainMessage<DiscoverServiceRequest> | undefined): boolean {
    return proto3.util.equals(DiscoverServiceRequest, a, b);
  }
}

/**
 * @generated from message taucorder.v1.ConsensusStateRequest
 */
export class ConsensusStateRequest extends Message<ConsensusStateRequest> {
  /**
   * @generated from field: taucorder.v1.Node node = 1;
   */
  node?: Node;

  /**
   * @generated from field: string pid = 2;
   */
  pid = "";

  constructor(data?: PartialMessage<ConsensusStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.ConsensusStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "pid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConsensusStateRequest {
    return new ConsensusStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConsensusStateRequest {
    return new ConsensusStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConsensusStateRequest {
    return new ConsensusStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConsensusStateRequest | PlainMessage<ConsensusStateRequest> | undefined, b: ConsensusStateRequest | PlainMessage<ConsensusStateRequest> | undefined): boolean {
    return proto3.util.equals(ConsensusStateRequest, a, b);
  }
}

/**
 * @generated from message taucorder.v1.CRDTState
 */
export class CRDTState extends Message<CRDTState> {
  /**
   * cids
   *
   * @generated from field: repeated string heads = 1;
   */
  heads: string[] = [];

  constructor(data?: PartialMessage<CRDTState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.CRDTState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "heads", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CRDTState {
    return new CRDTState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CRDTState {
    return new CRDTState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CRDTState {
    return new CRDTState().fromJsonString(jsonString, options);
  }

  static equals(a: CRDTState | PlainMessage<CRDTState> | undefined, b: CRDTState | PlainMessage<CRDTState> | undefined): boolean {
    return proto3.util.equals(CRDTState, a, b);
  }
}

/**
 * @generated from message taucorder.v1.ConsensusState
 */
export class ConsensusState extends Message<ConsensusState> {
  /**
   * @generated from field: taucorder.v1.Peer member = 1;
   */
  member?: Peer;

  /**
   * @generated from oneof taucorder.v1.ConsensusState.consensus
   */
  consensus: {
    /**
     * @generated from field: taucorder.v1.CRDTState crdt = 2;
     */
    value: CRDTState;
    case: "crdt";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ConsensusState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "taucorder.v1.ConsensusState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "member", kind: "message", T: Peer },
    { no: 2, name: "crdt", kind: "message", T: CRDTState, oneof: "consensus" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConsensusState {
    return new ConsensusState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConsensusState {
    return new ConsensusState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConsensusState {
    return new ConsensusState().fromJsonString(jsonString, options);
  }

  static equals(a: ConsensusState | PlainMessage<ConsensusState> | undefined, b: ConsensusState | PlainMessage<ConsensusState> | undefined): boolean {
    return proto3.util.equals(ConsensusState, a, b);
  }
}

