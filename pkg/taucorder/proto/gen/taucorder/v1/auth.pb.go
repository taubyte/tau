// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: taucorder/v1/auth.proto

package taucorderv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Data Structures
type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Provider     string        `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Repositories *ProjectRepos `protobuf:"bytes,4,opt,name=repositories,proto3" json:"repositories,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_auth_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_auth_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_auth_proto_rawDescGZIP(), []int{0}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Project) GetRepositories() *ProjectRepos {
	if x != nil {
		return x.Repositories
	}
	return nil
}

type ProjectRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *RepositoryId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId        string        `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DeployKeyPrivate string        `protobuf:"bytes,3,opt,name=deploy_key_private,json=deployKeyPrivate,proto3" json:"deploy_key_private,omitempty"`
}

func (x *ProjectRepo) Reset() {
	*x = ProjectRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_auth_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectRepo) ProtoMessage() {}

func (x *ProjectRepo) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_auth_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectRepo.ProtoReflect.Descriptor instead.
func (*ProjectRepo) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_auth_proto_rawDescGZIP(), []int{1}
}

func (x *ProjectRepo) GetId() *RepositoryId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProjectRepo) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectRepo) GetDeployKeyPrivate() string {
	if x != nil {
		return x.DeployKeyPrivate
	}
	return ""
}

type ProjectRepos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *ProjectRepo `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Code   *ProjectRepo `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ProjectRepos) Reset() {
	*x = ProjectRepos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_auth_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectRepos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectRepos) ProtoMessage() {}

func (x *ProjectRepos) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_auth_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectRepos.ProtoReflect.Descriptor instead.
func (*ProjectRepos) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_auth_proto_rawDescGZIP(), []int{2}
}

func (x *ProjectRepos) GetConfig() *ProjectRepo {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ProjectRepos) GetCode() *ProjectRepo {
	if x != nil {
		return x.Code
	}
	return nil
}

type ByProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *Node  `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ByProjectRequest) Reset() {
	*x = ByProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_auth_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByProjectRequest) ProtoMessage() {}

func (x *ByProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_auth_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByProjectRequest.ProtoReflect.Descriptor instead.
func (*ByProjectRequest) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_auth_proto_rawDescGZIP(), []int{3}
}

func (x *ByProjectRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ByProjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ByRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *Node         `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Id   *RepositoryId `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ByRepositoryRequest) Reset() {
	*x = ByRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_auth_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByRepositoryRequest) ProtoMessage() {}

func (x *ByRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_auth_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByRepositoryRequest.ProtoReflect.Descriptor instead.
func (*ByRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_auth_proto_rawDescGZIP(), []int{4}
}

func (x *ByRepositoryRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ByRepositoryRequest) GetId() *RepositoryId {
	if x != nil {
		return x.Id
	}
	return nil
}

type ByHookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *Node  `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ByHookRequest) Reset() {
	*x = ByHookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_auth_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByHookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByHookRequest) ProtoMessage() {}

func (x *ByHookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_auth_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByHookRequest.ProtoReflect.Descriptor instead.
func (*ByHookRequest) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_auth_proto_rawDescGZIP(), []int{5}
}

func (x *ByHookRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ByHookRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GithubHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryId int64  `protobuf:"varint,2,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Secret       string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *GithubHook) Reset() {
	*x = GithubHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_auth_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubHook) ProtoMessage() {}

func (x *GithubHook) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_auth_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubHook.ProtoReflect.Descriptor instead.
func (*GithubHook) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_auth_proto_rawDescGZIP(), []int{6}
}

func (x *GithubHook) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GithubHook) GetRepositoryId() int64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *GithubHook) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type BitbucketHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BitbucketHook) Reset() {
	*x = BitbucketHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_auth_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitbucketHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitbucketHook) ProtoMessage() {}

func (x *BitbucketHook) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_auth_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitbucketHook.ProtoReflect.Descriptor instead.
func (*BitbucketHook) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_auth_proto_rawDescGZIP(), []int{7}
}

func (x *BitbucketHook) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Hook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Provider:
	//
	//	*Hook_Github
	//	*Hook_Bitbucket
	Provider isHook_Provider `protobuf_oneof:"provider"`
}

func (x *Hook) Reset() {
	*x = Hook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_auth_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hook) ProtoMessage() {}

func (x *Hook) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_auth_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hook.ProtoReflect.Descriptor instead.
func (*Hook) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_auth_proto_rawDescGZIP(), []int{8}
}

func (x *Hook) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *Hook) GetProvider() isHook_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *Hook) GetGithub() *GithubHook {
	if x, ok := x.GetProvider().(*Hook_Github); ok {
		return x.Github
	}
	return nil
}

func (x *Hook) GetBitbucket() *BitbucketHook {
	if x, ok := x.GetProvider().(*Hook_Bitbucket); ok {
		return x.Bitbucket
	}
	return nil
}

type isHook_Provider interface {
	isHook_Provider()
}

type Hook_Github struct {
	Github *GithubHook `protobuf:"bytes,2,opt,name=github,proto3,oneof"`
}

type Hook_Bitbucket struct {
	Bitbucket *BitbucketHook `protobuf:"bytes,3,opt,name=bitbucket,proto3,oneof"`
}

func (*Hook_Github) isHook_Provider() {}

func (*Hook_Bitbucket) isHook_Provider() {}

type X509Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Acme bool   `protobuf:"varint,2,opt,name=acme,proto3" json:"acme,omitempty"`
}

func (x *X509Certificate) Reset() {
	*x = X509Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_auth_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509Certificate) ProtoMessage() {}

func (x *X509Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_auth_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509Certificate.ProtoReflect.Descriptor instead.
func (*X509Certificate) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_auth_proto_rawDescGZIP(), []int{9}
}

func (x *X509Certificate) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *X509Certificate) GetAcme() bool {
	if x != nil {
		return x.Acme
	}
	return false
}

type X509CertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node   *Node  `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Data   []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *X509CertificateRequest) Reset() {
	*x = X509CertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_auth_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509CertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509CertificateRequest) ProtoMessage() {}

func (x *X509CertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_auth_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509CertificateRequest.ProtoReflect.Descriptor instead.
func (*X509CertificateRequest) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_auth_proto_rawDescGZIP(), []int{10}
}

func (x *X509CertificateRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *X509CertificateRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *X509CertificateRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_taucorder_v1_auth_proto protoreflect.FileDescriptor

var file_taucorder_v1_auth_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x61, 0x75, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x86,
	0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x2a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x75,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4b, 0x65, 0x79,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x70, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x42, 0x79, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61,
	0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x13, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x75,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x47, 0x0a, 0x0d, 0x42, 0x79, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x0a, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x22, 0x1f, 0x0a, 0x0d, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x04, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32,
	0x0a, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x48, 0x00, 0x52, 0x06, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x12, 0x3b, 0x0a, 0x09, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x6f,
	0x6f, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x0f, 0x58,
	0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x63, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x61, 0x63, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x16, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x91, 0x02, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x74,
	0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x1a, 0x12, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x30, 0x01, 0x12, 0x4a,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74,
	0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x1c, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x30, 0x01, 0x32, 0x8a, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x74, 0x61, 0x75,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x15,
	0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1e,
	0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x79,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x99, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x74, 0x61,
	0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a,
	0x19, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x32, 0x81, 0x01, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x49, 0x6e,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x12, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6f, 0x6b, 0x30, 0x01, 0x12, 0x36, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x79, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x6f, 0x6f, 0x6b, 0x32, 0xa3, 0x02, 0x0a, 0x11, 0x58, 0x35, 0x30, 0x39, 0x49, 0x6e,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12,
	0x24, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x58,
	0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x74, 0x61,
	0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x24, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0xb7, 0x01, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x42, 0x09, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x47, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x61, 0x75, 0x62, 0x79, 0x74,
	0x65, 0x2f, 0x74, 0x61, 0x75, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x61,
	0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x61, 0x75, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x54,
	0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x54, 0x61,
	0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x54, 0x61, 0x75,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x54, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_taucorder_v1_auth_proto_rawDescOnce sync.Once
	file_taucorder_v1_auth_proto_rawDescData = file_taucorder_v1_auth_proto_rawDesc
)

func file_taucorder_v1_auth_proto_rawDescGZIP() []byte {
	file_taucorder_v1_auth_proto_rawDescOnce.Do(func() {
		file_taucorder_v1_auth_proto_rawDescData = protoimpl.X.CompressGZIP(file_taucorder_v1_auth_proto_rawDescData)
	})
	return file_taucorder_v1_auth_proto_rawDescData
}

var file_taucorder_v1_auth_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_taucorder_v1_auth_proto_goTypes = []any{
	(*Project)(nil),                // 0: taucorder.v1.Project
	(*ProjectRepo)(nil),            // 1: taucorder.v1.ProjectRepo
	(*ProjectRepos)(nil),           // 2: taucorder.v1.ProjectRepos
	(*ByProjectRequest)(nil),       // 3: taucorder.v1.ByProjectRequest
	(*ByRepositoryRequest)(nil),    // 4: taucorder.v1.ByRepositoryRequest
	(*ByHookRequest)(nil),          // 5: taucorder.v1.ByHookRequest
	(*GithubHook)(nil),             // 6: taucorder.v1.GithubHook
	(*BitbucketHook)(nil),          // 7: taucorder.v1.BitbucketHook
	(*Hook)(nil),                   // 8: taucorder.v1.Hook
	(*X509Certificate)(nil),        // 9: taucorder.v1.X509Certificate
	(*X509CertificateRequest)(nil), // 10: taucorder.v1.X509CertificateRequest
	(*RepositoryId)(nil),           // 11: taucorder.v1.RepositoryId
	(*Node)(nil),                   // 12: taucorder.v1.Node
	(*DiscoverServiceRequest)(nil), // 13: taucorder.v1.DiscoverServiceRequest
	(*ConsensusStateRequest)(nil),  // 14: taucorder.v1.ConsensusStateRequest
	(*Peer)(nil),                   // 15: taucorder.v1.Peer
	(*ConsensusState)(nil),         // 16: taucorder.v1.ConsensusState
	(*Empty)(nil),                  // 17: taucorder.v1.Empty
}
var file_taucorder_v1_auth_proto_depIdxs = []int32{
	2,  // 0: taucorder.v1.Project.repositories:type_name -> taucorder.v1.ProjectRepos
	11, // 1: taucorder.v1.ProjectRepo.id:type_name -> taucorder.v1.RepositoryId
	1,  // 2: taucorder.v1.ProjectRepos.config:type_name -> taucorder.v1.ProjectRepo
	1,  // 3: taucorder.v1.ProjectRepos.code:type_name -> taucorder.v1.ProjectRepo
	12, // 4: taucorder.v1.ByProjectRequest.node:type_name -> taucorder.v1.Node
	12, // 5: taucorder.v1.ByRepositoryRequest.node:type_name -> taucorder.v1.Node
	11, // 6: taucorder.v1.ByRepositoryRequest.id:type_name -> taucorder.v1.RepositoryId
	12, // 7: taucorder.v1.ByHookRequest.node:type_name -> taucorder.v1.Node
	6,  // 8: taucorder.v1.Hook.github:type_name -> taucorder.v1.GithubHook
	7,  // 9: taucorder.v1.Hook.bitbucket:type_name -> taucorder.v1.BitbucketHook
	12, // 10: taucorder.v1.X509CertificateRequest.node:type_name -> taucorder.v1.Node
	12, // 11: taucorder.v1.AuthService.List:input_type -> taucorder.v1.Node
	13, // 12: taucorder.v1.AuthService.Discover:input_type -> taucorder.v1.DiscoverServiceRequest
	14, // 13: taucorder.v1.AuthService.State:input_type -> taucorder.v1.ConsensusStateRequest
	12, // 14: taucorder.v1.AuthService.States:input_type -> taucorder.v1.Node
	12, // 15: taucorder.v1.ProjectsInAuthService.List:input_type -> taucorder.v1.Node
	3,  // 16: taucorder.v1.ProjectsInAuthService.Get:input_type -> taucorder.v1.ByProjectRequest
	12, // 17: taucorder.v1.RepositoriesInAuthService.List:input_type -> taucorder.v1.Node
	4,  // 18: taucorder.v1.RepositoriesInAuthService.Get:input_type -> taucorder.v1.ByRepositoryRequest
	12, // 19: taucorder.v1.GitHooksInAuthService.List:input_type -> taucorder.v1.Node
	5,  // 20: taucorder.v1.GitHooksInAuthService.Get:input_type -> taucorder.v1.ByHookRequest
	12, // 21: taucorder.v1.X509InAuthService.List:input_type -> taucorder.v1.Node
	10, // 22: taucorder.v1.X509InAuthService.Get:input_type -> taucorder.v1.X509CertificateRequest
	10, // 23: taucorder.v1.X509InAuthService.Set:input_type -> taucorder.v1.X509CertificateRequest
	10, // 24: taucorder.v1.X509InAuthService.Delete:input_type -> taucorder.v1.X509CertificateRequest
	15, // 25: taucorder.v1.AuthService.List:output_type -> taucorder.v1.Peer
	15, // 26: taucorder.v1.AuthService.Discover:output_type -> taucorder.v1.Peer
	16, // 27: taucorder.v1.AuthService.State:output_type -> taucorder.v1.ConsensusState
	16, // 28: taucorder.v1.AuthService.States:output_type -> taucorder.v1.ConsensusState
	0,  // 29: taucorder.v1.ProjectsInAuthService.List:output_type -> taucorder.v1.Project
	0,  // 30: taucorder.v1.ProjectsInAuthService.Get:output_type -> taucorder.v1.Project
	1,  // 31: taucorder.v1.RepositoriesInAuthService.List:output_type -> taucorder.v1.ProjectRepo
	1,  // 32: taucorder.v1.RepositoriesInAuthService.Get:output_type -> taucorder.v1.ProjectRepo
	8,  // 33: taucorder.v1.GitHooksInAuthService.List:output_type -> taucorder.v1.Hook
	8,  // 34: taucorder.v1.GitHooksInAuthService.Get:output_type -> taucorder.v1.Hook
	9,  // 35: taucorder.v1.X509InAuthService.List:output_type -> taucorder.v1.X509Certificate
	9,  // 36: taucorder.v1.X509InAuthService.Get:output_type -> taucorder.v1.X509Certificate
	17, // 37: taucorder.v1.X509InAuthService.Set:output_type -> taucorder.v1.Empty
	17, // 38: taucorder.v1.X509InAuthService.Delete:output_type -> taucorder.v1.Empty
	25, // [25:39] is the sub-list for method output_type
	11, // [11:25] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_taucorder_v1_auth_proto_init() }
func file_taucorder_v1_auth_proto_init() {
	if File_taucorder_v1_auth_proto != nil {
		return
	}
	file_taucorder_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_taucorder_v1_auth_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taucorder_v1_auth_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ProjectRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taucorder_v1_auth_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ProjectRepos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taucorder_v1_auth_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ByProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taucorder_v1_auth_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ByRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taucorder_v1_auth_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ByHookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taucorder_v1_auth_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GithubHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taucorder_v1_auth_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*BitbucketHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taucorder_v1_auth_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Hook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taucorder_v1_auth_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*X509Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taucorder_v1_auth_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*X509CertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_taucorder_v1_auth_proto_msgTypes[8].OneofWrappers = []any{
		(*Hook_Github)(nil),
		(*Hook_Bitbucket)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_taucorder_v1_auth_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_taucorder_v1_auth_proto_goTypes,
		DependencyIndexes: file_taucorder_v1_auth_proto_depIdxs,
		MessageInfos:      file_taucorder_v1_auth_proto_msgTypes,
	}.Build()
	File_taucorder_v1_auth_proto = out.File
	file_taucorder_v1_auth_proto_rawDesc = nil
	file_taucorder_v1_auth_proto_goTypes = nil
	file_taucorder_v1_auth_proto_depIdxs = nil
}
