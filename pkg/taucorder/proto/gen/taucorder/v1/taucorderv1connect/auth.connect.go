// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: taucorder/v1/auth.proto

package taucorderv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/taubyte/tau/pkg/taucorder/proto/gen/taucorder/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "taucorder.v1.AuthService"
	// ProjectsInAuthServiceName is the fully-qualified name of the ProjectsInAuthService service.
	ProjectsInAuthServiceName = "taucorder.v1.ProjectsInAuthService"
	// RepositoriesInAuthServiceName is the fully-qualified name of the RepositoriesInAuthService
	// service.
	RepositoriesInAuthServiceName = "taucorder.v1.RepositoriesInAuthService"
	// GitHooksInAuthServiceName is the fully-qualified name of the GitHooksInAuthService service.
	GitHooksInAuthServiceName = "taucorder.v1.GitHooksInAuthService"
	// X509InAuthServiceName is the fully-qualified name of the X509InAuthService service.
	X509InAuthServiceName = "taucorder.v1.X509InAuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceListProcedure is the fully-qualified name of the AuthService's List RPC.
	AuthServiceListProcedure = "/taucorder.v1.AuthService/List"
	// AuthServiceDiscoverProcedure is the fully-qualified name of the AuthService's Discover RPC.
	AuthServiceDiscoverProcedure = "/taucorder.v1.AuthService/Discover"
	// AuthServiceStateProcedure is the fully-qualified name of the AuthService's State RPC.
	AuthServiceStateProcedure = "/taucorder.v1.AuthService/State"
	// AuthServiceStatesProcedure is the fully-qualified name of the AuthService's States RPC.
	AuthServiceStatesProcedure = "/taucorder.v1.AuthService/States"
	// ProjectsInAuthServiceListProcedure is the fully-qualified name of the ProjectsInAuthService's
	// List RPC.
	ProjectsInAuthServiceListProcedure = "/taucorder.v1.ProjectsInAuthService/List"
	// ProjectsInAuthServiceGetProcedure is the fully-qualified name of the ProjectsInAuthService's Get
	// RPC.
	ProjectsInAuthServiceGetProcedure = "/taucorder.v1.ProjectsInAuthService/Get"
	// RepositoriesInAuthServiceListProcedure is the fully-qualified name of the
	// RepositoriesInAuthService's List RPC.
	RepositoriesInAuthServiceListProcedure = "/taucorder.v1.RepositoriesInAuthService/List"
	// RepositoriesInAuthServiceGetProcedure is the fully-qualified name of the
	// RepositoriesInAuthService's Get RPC.
	RepositoriesInAuthServiceGetProcedure = "/taucorder.v1.RepositoriesInAuthService/Get"
	// GitHooksInAuthServiceListProcedure is the fully-qualified name of the GitHooksInAuthService's
	// List RPC.
	GitHooksInAuthServiceListProcedure = "/taucorder.v1.GitHooksInAuthService/List"
	// GitHooksInAuthServiceGetProcedure is the fully-qualified name of the GitHooksInAuthService's Get
	// RPC.
	GitHooksInAuthServiceGetProcedure = "/taucorder.v1.GitHooksInAuthService/Get"
	// X509InAuthServiceListProcedure is the fully-qualified name of the X509InAuthService's List RPC.
	X509InAuthServiceListProcedure = "/taucorder.v1.X509InAuthService/List"
	// X509InAuthServiceGetProcedure is the fully-qualified name of the X509InAuthService's Get RPC.
	X509InAuthServiceGetProcedure = "/taucorder.v1.X509InAuthService/Get"
	// X509InAuthServiceSetProcedure is the fully-qualified name of the X509InAuthService's Set RPC.
	X509InAuthServiceSetProcedure = "/taucorder.v1.X509InAuthService/Set"
	// X509InAuthServiceDeleteProcedure is the fully-qualified name of the X509InAuthService's Delete
	// RPC.
	X509InAuthServiceDeleteProcedure = "/taucorder.v1.X509InAuthService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authServiceServiceDescriptor                  = v1.File_taucorder_v1_auth_proto.Services().ByName("AuthService")
	authServiceListMethodDescriptor               = authServiceServiceDescriptor.Methods().ByName("List")
	authServiceDiscoverMethodDescriptor           = authServiceServiceDescriptor.Methods().ByName("Discover")
	authServiceStateMethodDescriptor              = authServiceServiceDescriptor.Methods().ByName("State")
	authServiceStatesMethodDescriptor             = authServiceServiceDescriptor.Methods().ByName("States")
	projectsInAuthServiceServiceDescriptor        = v1.File_taucorder_v1_auth_proto.Services().ByName("ProjectsInAuthService")
	projectsInAuthServiceListMethodDescriptor     = projectsInAuthServiceServiceDescriptor.Methods().ByName("List")
	projectsInAuthServiceGetMethodDescriptor      = projectsInAuthServiceServiceDescriptor.Methods().ByName("Get")
	repositoriesInAuthServiceServiceDescriptor    = v1.File_taucorder_v1_auth_proto.Services().ByName("RepositoriesInAuthService")
	repositoriesInAuthServiceListMethodDescriptor = repositoriesInAuthServiceServiceDescriptor.Methods().ByName("List")
	repositoriesInAuthServiceGetMethodDescriptor  = repositoriesInAuthServiceServiceDescriptor.Methods().ByName("Get")
	gitHooksInAuthServiceServiceDescriptor        = v1.File_taucorder_v1_auth_proto.Services().ByName("GitHooksInAuthService")
	gitHooksInAuthServiceListMethodDescriptor     = gitHooksInAuthServiceServiceDescriptor.Methods().ByName("List")
	gitHooksInAuthServiceGetMethodDescriptor      = gitHooksInAuthServiceServiceDescriptor.Methods().ByName("Get")
	x509InAuthServiceServiceDescriptor            = v1.File_taucorder_v1_auth_proto.Services().ByName("X509InAuthService")
	x509InAuthServiceListMethodDescriptor         = x509InAuthServiceServiceDescriptor.Methods().ByName("List")
	x509InAuthServiceGetMethodDescriptor          = x509InAuthServiceServiceDescriptor.Methods().ByName("Get")
	x509InAuthServiceSetMethodDescriptor          = x509InAuthServiceServiceDescriptor.Methods().ByName("Set")
	x509InAuthServiceDeleteMethodDescriptor       = x509InAuthServiceServiceDescriptor.Methods().ByName("Delete")
)

// AuthServiceClient is a client for the taucorder.v1.AuthService service.
type AuthServiceClient interface {
	List(context.Context, *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.Peer], error)
	Discover(context.Context, *connect.Request[v1.DiscoverServiceRequest]) (*connect.ServerStreamForClient[v1.Peer], error)
	State(context.Context, *connect.Request[v1.ConsensusStateRequest]) (*connect.Response[v1.ConsensusState], error)
	States(context.Context, *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.ConsensusState], error)
}

// NewAuthServiceClient constructs a client for the taucorder.v1.AuthService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		list: connect.NewClient[v1.Node, v1.Peer](
			httpClient,
			baseURL+AuthServiceListProcedure,
			connect.WithSchema(authServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		discover: connect.NewClient[v1.DiscoverServiceRequest, v1.Peer](
			httpClient,
			baseURL+AuthServiceDiscoverProcedure,
			connect.WithSchema(authServiceDiscoverMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		state: connect.NewClient[v1.ConsensusStateRequest, v1.ConsensusState](
			httpClient,
			baseURL+AuthServiceStateProcedure,
			connect.WithSchema(authServiceStateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		states: connect.NewClient[v1.Node, v1.ConsensusState](
			httpClient,
			baseURL+AuthServiceStatesProcedure,
			connect.WithSchema(authServiceStatesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	list     *connect.Client[v1.Node, v1.Peer]
	discover *connect.Client[v1.DiscoverServiceRequest, v1.Peer]
	state    *connect.Client[v1.ConsensusStateRequest, v1.ConsensusState]
	states   *connect.Client[v1.Node, v1.ConsensusState]
}

// List calls taucorder.v1.AuthService.List.
func (c *authServiceClient) List(ctx context.Context, req *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.Peer], error) {
	return c.list.CallServerStream(ctx, req)
}

// Discover calls taucorder.v1.AuthService.Discover.
func (c *authServiceClient) Discover(ctx context.Context, req *connect.Request[v1.DiscoverServiceRequest]) (*connect.ServerStreamForClient[v1.Peer], error) {
	return c.discover.CallServerStream(ctx, req)
}

// State calls taucorder.v1.AuthService.State.
func (c *authServiceClient) State(ctx context.Context, req *connect.Request[v1.ConsensusStateRequest]) (*connect.Response[v1.ConsensusState], error) {
	return c.state.CallUnary(ctx, req)
}

// States calls taucorder.v1.AuthService.States.
func (c *authServiceClient) States(ctx context.Context, req *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.ConsensusState], error) {
	return c.states.CallServerStream(ctx, req)
}

// AuthServiceHandler is an implementation of the taucorder.v1.AuthService service.
type AuthServiceHandler interface {
	List(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.Peer]) error
	Discover(context.Context, *connect.Request[v1.DiscoverServiceRequest], *connect.ServerStream[v1.Peer]) error
	State(context.Context, *connect.Request[v1.ConsensusStateRequest]) (*connect.Response[v1.ConsensusState], error)
	States(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.ConsensusState]) error
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceListHandler := connect.NewServerStreamHandler(
		AuthServiceListProcedure,
		svc.List,
		connect.WithSchema(authServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceDiscoverHandler := connect.NewServerStreamHandler(
		AuthServiceDiscoverProcedure,
		svc.Discover,
		connect.WithSchema(authServiceDiscoverMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceStateHandler := connect.NewUnaryHandler(
		AuthServiceStateProcedure,
		svc.State,
		connect.WithSchema(authServiceStateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceStatesHandler := connect.NewServerStreamHandler(
		AuthServiceStatesProcedure,
		svc.States,
		connect.WithSchema(authServiceStatesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/taucorder.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceListProcedure:
			authServiceListHandler.ServeHTTP(w, r)
		case AuthServiceDiscoverProcedure:
			authServiceDiscoverHandler.ServeHTTP(w, r)
		case AuthServiceStateProcedure:
			authServiceStateHandler.ServeHTTP(w, r)
		case AuthServiceStatesProcedure:
			authServiceStatesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) List(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.Peer]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.AuthService.List is not implemented"))
}

func (UnimplementedAuthServiceHandler) Discover(context.Context, *connect.Request[v1.DiscoverServiceRequest], *connect.ServerStream[v1.Peer]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.AuthService.Discover is not implemented"))
}

func (UnimplementedAuthServiceHandler) State(context.Context, *connect.Request[v1.ConsensusStateRequest]) (*connect.Response[v1.ConsensusState], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.AuthService.State is not implemented"))
}

func (UnimplementedAuthServiceHandler) States(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.ConsensusState]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.AuthService.States is not implemented"))
}

// ProjectsInAuthServiceClient is a client for the taucorder.v1.ProjectsInAuthService service.
type ProjectsInAuthServiceClient interface {
	List(context.Context, *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.Project], error)
	Get(context.Context, *connect.Request[v1.ByProjectRequest]) (*connect.Response[v1.Project], error)
}

// NewProjectsInAuthServiceClient constructs a client for the taucorder.v1.ProjectsInAuthService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectsInAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProjectsInAuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &projectsInAuthServiceClient{
		list: connect.NewClient[v1.Node, v1.Project](
			httpClient,
			baseURL+ProjectsInAuthServiceListProcedure,
			connect.WithSchema(projectsInAuthServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.ByProjectRequest, v1.Project](
			httpClient,
			baseURL+ProjectsInAuthServiceGetProcedure,
			connect.WithSchema(projectsInAuthServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// projectsInAuthServiceClient implements ProjectsInAuthServiceClient.
type projectsInAuthServiceClient struct {
	list *connect.Client[v1.Node, v1.Project]
	get  *connect.Client[v1.ByProjectRequest, v1.Project]
}

// List calls taucorder.v1.ProjectsInAuthService.List.
func (c *projectsInAuthServiceClient) List(ctx context.Context, req *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.Project], error) {
	return c.list.CallServerStream(ctx, req)
}

// Get calls taucorder.v1.ProjectsInAuthService.Get.
func (c *projectsInAuthServiceClient) Get(ctx context.Context, req *connect.Request[v1.ByProjectRequest]) (*connect.Response[v1.Project], error) {
	return c.get.CallUnary(ctx, req)
}

// ProjectsInAuthServiceHandler is an implementation of the taucorder.v1.ProjectsInAuthService
// service.
type ProjectsInAuthServiceHandler interface {
	List(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.Project]) error
	Get(context.Context, *connect.Request[v1.ByProjectRequest]) (*connect.Response[v1.Project], error)
}

// NewProjectsInAuthServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectsInAuthServiceHandler(svc ProjectsInAuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	projectsInAuthServiceListHandler := connect.NewServerStreamHandler(
		ProjectsInAuthServiceListProcedure,
		svc.List,
		connect.WithSchema(projectsInAuthServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	projectsInAuthServiceGetHandler := connect.NewUnaryHandler(
		ProjectsInAuthServiceGetProcedure,
		svc.Get,
		connect.WithSchema(projectsInAuthServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/taucorder.v1.ProjectsInAuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProjectsInAuthServiceListProcedure:
			projectsInAuthServiceListHandler.ServeHTTP(w, r)
		case ProjectsInAuthServiceGetProcedure:
			projectsInAuthServiceGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProjectsInAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectsInAuthServiceHandler struct{}

func (UnimplementedProjectsInAuthServiceHandler) List(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.Project]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.ProjectsInAuthService.List is not implemented"))
}

func (UnimplementedProjectsInAuthServiceHandler) Get(context.Context, *connect.Request[v1.ByProjectRequest]) (*connect.Response[v1.Project], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.ProjectsInAuthService.Get is not implemented"))
}

// RepositoriesInAuthServiceClient is a client for the taucorder.v1.RepositoriesInAuthService
// service.
type RepositoriesInAuthServiceClient interface {
	List(context.Context, *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.ProjectRepo], error)
	Get(context.Context, *connect.Request[v1.ByRepositoryRequest]) (*connect.Response[v1.ProjectRepo], error)
}

// NewRepositoriesInAuthServiceClient constructs a client for the
// taucorder.v1.RepositoriesInAuthService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRepositoriesInAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RepositoriesInAuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &repositoriesInAuthServiceClient{
		list: connect.NewClient[v1.Node, v1.ProjectRepo](
			httpClient,
			baseURL+RepositoriesInAuthServiceListProcedure,
			connect.WithSchema(repositoriesInAuthServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.ByRepositoryRequest, v1.ProjectRepo](
			httpClient,
			baseURL+RepositoriesInAuthServiceGetProcedure,
			connect.WithSchema(repositoriesInAuthServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// repositoriesInAuthServiceClient implements RepositoriesInAuthServiceClient.
type repositoriesInAuthServiceClient struct {
	list *connect.Client[v1.Node, v1.ProjectRepo]
	get  *connect.Client[v1.ByRepositoryRequest, v1.ProjectRepo]
}

// List calls taucorder.v1.RepositoriesInAuthService.List.
func (c *repositoriesInAuthServiceClient) List(ctx context.Context, req *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.ProjectRepo], error) {
	return c.list.CallServerStream(ctx, req)
}

// Get calls taucorder.v1.RepositoriesInAuthService.Get.
func (c *repositoriesInAuthServiceClient) Get(ctx context.Context, req *connect.Request[v1.ByRepositoryRequest]) (*connect.Response[v1.ProjectRepo], error) {
	return c.get.CallUnary(ctx, req)
}

// RepositoriesInAuthServiceHandler is an implementation of the
// taucorder.v1.RepositoriesInAuthService service.
type RepositoriesInAuthServiceHandler interface {
	List(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.ProjectRepo]) error
	Get(context.Context, *connect.Request[v1.ByRepositoryRequest]) (*connect.Response[v1.ProjectRepo], error)
}

// NewRepositoriesInAuthServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRepositoriesInAuthServiceHandler(svc RepositoriesInAuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	repositoriesInAuthServiceListHandler := connect.NewServerStreamHandler(
		RepositoriesInAuthServiceListProcedure,
		svc.List,
		connect.WithSchema(repositoriesInAuthServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoriesInAuthServiceGetHandler := connect.NewUnaryHandler(
		RepositoriesInAuthServiceGetProcedure,
		svc.Get,
		connect.WithSchema(repositoriesInAuthServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/taucorder.v1.RepositoriesInAuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RepositoriesInAuthServiceListProcedure:
			repositoriesInAuthServiceListHandler.ServeHTTP(w, r)
		case RepositoriesInAuthServiceGetProcedure:
			repositoriesInAuthServiceGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRepositoriesInAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRepositoriesInAuthServiceHandler struct{}

func (UnimplementedRepositoriesInAuthServiceHandler) List(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.ProjectRepo]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.RepositoriesInAuthService.List is not implemented"))
}

func (UnimplementedRepositoriesInAuthServiceHandler) Get(context.Context, *connect.Request[v1.ByRepositoryRequest]) (*connect.Response[v1.ProjectRepo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.RepositoriesInAuthService.Get is not implemented"))
}

// GitHooksInAuthServiceClient is a client for the taucorder.v1.GitHooksInAuthService service.
type GitHooksInAuthServiceClient interface {
	List(context.Context, *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.Hook], error)
	Get(context.Context, *connect.Request[v1.ByHookRequest]) (*connect.Response[v1.Hook], error)
}

// NewGitHooksInAuthServiceClient constructs a client for the taucorder.v1.GitHooksInAuthService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGitHooksInAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GitHooksInAuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gitHooksInAuthServiceClient{
		list: connect.NewClient[v1.Node, v1.Hook](
			httpClient,
			baseURL+GitHooksInAuthServiceListProcedure,
			connect.WithSchema(gitHooksInAuthServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.ByHookRequest, v1.Hook](
			httpClient,
			baseURL+GitHooksInAuthServiceGetProcedure,
			connect.WithSchema(gitHooksInAuthServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gitHooksInAuthServiceClient implements GitHooksInAuthServiceClient.
type gitHooksInAuthServiceClient struct {
	list *connect.Client[v1.Node, v1.Hook]
	get  *connect.Client[v1.ByHookRequest, v1.Hook]
}

// List calls taucorder.v1.GitHooksInAuthService.List.
func (c *gitHooksInAuthServiceClient) List(ctx context.Context, req *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.Hook], error) {
	return c.list.CallServerStream(ctx, req)
}

// Get calls taucorder.v1.GitHooksInAuthService.Get.
func (c *gitHooksInAuthServiceClient) Get(ctx context.Context, req *connect.Request[v1.ByHookRequest]) (*connect.Response[v1.Hook], error) {
	return c.get.CallUnary(ctx, req)
}

// GitHooksInAuthServiceHandler is an implementation of the taucorder.v1.GitHooksInAuthService
// service.
type GitHooksInAuthServiceHandler interface {
	List(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.Hook]) error
	Get(context.Context, *connect.Request[v1.ByHookRequest]) (*connect.Response[v1.Hook], error)
}

// NewGitHooksInAuthServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGitHooksInAuthServiceHandler(svc GitHooksInAuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gitHooksInAuthServiceListHandler := connect.NewServerStreamHandler(
		GitHooksInAuthServiceListProcedure,
		svc.List,
		connect.WithSchema(gitHooksInAuthServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gitHooksInAuthServiceGetHandler := connect.NewUnaryHandler(
		GitHooksInAuthServiceGetProcedure,
		svc.Get,
		connect.WithSchema(gitHooksInAuthServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/taucorder.v1.GitHooksInAuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GitHooksInAuthServiceListProcedure:
			gitHooksInAuthServiceListHandler.ServeHTTP(w, r)
		case GitHooksInAuthServiceGetProcedure:
			gitHooksInAuthServiceGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGitHooksInAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGitHooksInAuthServiceHandler struct{}

func (UnimplementedGitHooksInAuthServiceHandler) List(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.Hook]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.GitHooksInAuthService.List is not implemented"))
}

func (UnimplementedGitHooksInAuthServiceHandler) Get(context.Context, *connect.Request[v1.ByHookRequest]) (*connect.Response[v1.Hook], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.GitHooksInAuthService.Get is not implemented"))
}

// X509InAuthServiceClient is a client for the taucorder.v1.X509InAuthService service.
type X509InAuthServiceClient interface {
	List(context.Context, *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.X509Certificate], error)
	Get(context.Context, *connect.Request[v1.X509CertificateRequest]) (*connect.Response[v1.X509Certificate], error)
	Set(context.Context, *connect.Request[v1.X509CertificateRequest]) (*connect.Response[v1.Empty], error)
	Delete(context.Context, *connect.Request[v1.X509CertificateRequest]) (*connect.Response[v1.Empty], error)
}

// NewX509InAuthServiceClient constructs a client for the taucorder.v1.X509InAuthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewX509InAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) X509InAuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &x509InAuthServiceClient{
		list: connect.NewClient[v1.Node, v1.X509Certificate](
			httpClient,
			baseURL+X509InAuthServiceListProcedure,
			connect.WithSchema(x509InAuthServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.X509CertificateRequest, v1.X509Certificate](
			httpClient,
			baseURL+X509InAuthServiceGetProcedure,
			connect.WithSchema(x509InAuthServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		set: connect.NewClient[v1.X509CertificateRequest, v1.Empty](
			httpClient,
			baseURL+X509InAuthServiceSetProcedure,
			connect.WithSchema(x509InAuthServiceSetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.X509CertificateRequest, v1.Empty](
			httpClient,
			baseURL+X509InAuthServiceDeleteProcedure,
			connect.WithSchema(x509InAuthServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// x509InAuthServiceClient implements X509InAuthServiceClient.
type x509InAuthServiceClient struct {
	list   *connect.Client[v1.Node, v1.X509Certificate]
	get    *connect.Client[v1.X509CertificateRequest, v1.X509Certificate]
	set    *connect.Client[v1.X509CertificateRequest, v1.Empty]
	delete *connect.Client[v1.X509CertificateRequest, v1.Empty]
}

// List calls taucorder.v1.X509InAuthService.List.
func (c *x509InAuthServiceClient) List(ctx context.Context, req *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.X509Certificate], error) {
	return c.list.CallServerStream(ctx, req)
}

// Get calls taucorder.v1.X509InAuthService.Get.
func (c *x509InAuthServiceClient) Get(ctx context.Context, req *connect.Request[v1.X509CertificateRequest]) (*connect.Response[v1.X509Certificate], error) {
	return c.get.CallUnary(ctx, req)
}

// Set calls taucorder.v1.X509InAuthService.Set.
func (c *x509InAuthServiceClient) Set(ctx context.Context, req *connect.Request[v1.X509CertificateRequest]) (*connect.Response[v1.Empty], error) {
	return c.set.CallUnary(ctx, req)
}

// Delete calls taucorder.v1.X509InAuthService.Delete.
func (c *x509InAuthServiceClient) Delete(ctx context.Context, req *connect.Request[v1.X509CertificateRequest]) (*connect.Response[v1.Empty], error) {
	return c.delete.CallUnary(ctx, req)
}

// X509InAuthServiceHandler is an implementation of the taucorder.v1.X509InAuthService service.
type X509InAuthServiceHandler interface {
	List(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.X509Certificate]) error
	Get(context.Context, *connect.Request[v1.X509CertificateRequest]) (*connect.Response[v1.X509Certificate], error)
	Set(context.Context, *connect.Request[v1.X509CertificateRequest]) (*connect.Response[v1.Empty], error)
	Delete(context.Context, *connect.Request[v1.X509CertificateRequest]) (*connect.Response[v1.Empty], error)
}

// NewX509InAuthServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewX509InAuthServiceHandler(svc X509InAuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	x509InAuthServiceListHandler := connect.NewServerStreamHandler(
		X509InAuthServiceListProcedure,
		svc.List,
		connect.WithSchema(x509InAuthServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	x509InAuthServiceGetHandler := connect.NewUnaryHandler(
		X509InAuthServiceGetProcedure,
		svc.Get,
		connect.WithSchema(x509InAuthServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	x509InAuthServiceSetHandler := connect.NewUnaryHandler(
		X509InAuthServiceSetProcedure,
		svc.Set,
		connect.WithSchema(x509InAuthServiceSetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	x509InAuthServiceDeleteHandler := connect.NewUnaryHandler(
		X509InAuthServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(x509InAuthServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/taucorder.v1.X509InAuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case X509InAuthServiceListProcedure:
			x509InAuthServiceListHandler.ServeHTTP(w, r)
		case X509InAuthServiceGetProcedure:
			x509InAuthServiceGetHandler.ServeHTTP(w, r)
		case X509InAuthServiceSetProcedure:
			x509InAuthServiceSetHandler.ServeHTTP(w, r)
		case X509InAuthServiceDeleteProcedure:
			x509InAuthServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedX509InAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedX509InAuthServiceHandler struct{}

func (UnimplementedX509InAuthServiceHandler) List(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.X509Certificate]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.X509InAuthService.List is not implemented"))
}

func (UnimplementedX509InAuthServiceHandler) Get(context.Context, *connect.Request[v1.X509CertificateRequest]) (*connect.Response[v1.X509Certificate], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.X509InAuthService.Get is not implemented"))
}

func (UnimplementedX509InAuthServiceHandler) Set(context.Context, *connect.Request[v1.X509CertificateRequest]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.X509InAuthService.Set is not implemented"))
}

func (UnimplementedX509InAuthServiceHandler) Delete(context.Context, *connect.Request[v1.X509CertificateRequest]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.X509InAuthService.Delete is not implemented"))
}
