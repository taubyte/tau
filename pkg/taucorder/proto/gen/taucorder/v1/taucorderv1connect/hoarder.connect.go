// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: taucorder/v1/hoarder.proto

package taucorderv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/taubyte/tau/pkg/taucorder/proto/gen/taucorder/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HoarderServiceName is the fully-qualified name of the HoarderService service.
	HoarderServiceName = "taucorder.v1.HoarderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HoarderServiceListProcedure is the fully-qualified name of the HoarderService's List RPC.
	HoarderServiceListProcedure = "/taucorder.v1.HoarderService/List"
	// HoarderServiceStashProcedure is the fully-qualified name of the HoarderService's Stash RPC.
	HoarderServiceStashProcedure = "/taucorder.v1.HoarderService/Stash"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	hoarderServiceServiceDescriptor     = v1.File_taucorder_v1_hoarder_proto.Services().ByName("HoarderService")
	hoarderServiceListMethodDescriptor  = hoarderServiceServiceDescriptor.Methods().ByName("List")
	hoarderServiceStashMethodDescriptor = hoarderServiceServiceDescriptor.Methods().ByName("Stash")
)

// HoarderServiceClient is a client for the taucorder.v1.HoarderService service.
type HoarderServiceClient interface {
	List(context.Context, *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.StashedItem], error)
	Stash(context.Context, *connect.Request[v1.StashRequest]) (*connect.Response[v1.Empty], error)
}

// NewHoarderServiceClient constructs a client for the taucorder.v1.HoarderService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHoarderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HoarderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &hoarderServiceClient{
		list: connect.NewClient[v1.Node, v1.StashedItem](
			httpClient,
			baseURL+HoarderServiceListProcedure,
			connect.WithSchema(hoarderServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stash: connect.NewClient[v1.StashRequest, v1.Empty](
			httpClient,
			baseURL+HoarderServiceStashProcedure,
			connect.WithSchema(hoarderServiceStashMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// hoarderServiceClient implements HoarderServiceClient.
type hoarderServiceClient struct {
	list  *connect.Client[v1.Node, v1.StashedItem]
	stash *connect.Client[v1.StashRequest, v1.Empty]
}

// List calls taucorder.v1.HoarderService.List.
func (c *hoarderServiceClient) List(ctx context.Context, req *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.StashedItem], error) {
	return c.list.CallServerStream(ctx, req)
}

// Stash calls taucorder.v1.HoarderService.Stash.
func (c *hoarderServiceClient) Stash(ctx context.Context, req *connect.Request[v1.StashRequest]) (*connect.Response[v1.Empty], error) {
	return c.stash.CallUnary(ctx, req)
}

// HoarderServiceHandler is an implementation of the taucorder.v1.HoarderService service.
type HoarderServiceHandler interface {
	List(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.StashedItem]) error
	Stash(context.Context, *connect.Request[v1.StashRequest]) (*connect.Response[v1.Empty], error)
}

// NewHoarderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHoarderServiceHandler(svc HoarderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hoarderServiceListHandler := connect.NewServerStreamHandler(
		HoarderServiceListProcedure,
		svc.List,
		connect.WithSchema(hoarderServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hoarderServiceStashHandler := connect.NewUnaryHandler(
		HoarderServiceStashProcedure,
		svc.Stash,
		connect.WithSchema(hoarderServiceStashMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/taucorder.v1.HoarderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HoarderServiceListProcedure:
			hoarderServiceListHandler.ServeHTTP(w, r)
		case HoarderServiceStashProcedure:
			hoarderServiceStashHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHoarderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHoarderServiceHandler struct{}

func (UnimplementedHoarderServiceHandler) List(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.StashedItem]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.HoarderService.List is not implemented"))
}

func (UnimplementedHoarderServiceHandler) Stash(context.Context, *connect.Request[v1.StashRequest]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.HoarderService.Stash is not implemented"))
}
