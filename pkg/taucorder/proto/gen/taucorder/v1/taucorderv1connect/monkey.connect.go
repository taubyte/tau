// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: taucorder/v1/monkey.proto

package taucorderv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/taubyte/tau/pkg/taucorder/proto/gen/taucorder/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MonkeyServiceName is the fully-qualified name of the MonkeyService service.
	MonkeyServiceName = "taucorder.v1.MonkeyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MonkeyServiceListProcedure is the fully-qualified name of the MonkeyService's List RPC.
	MonkeyServiceListProcedure = "/taucorder.v1.MonkeyService/List"
	// MonkeyServiceGetProcedure is the fully-qualified name of the MonkeyService's Get RPC.
	MonkeyServiceGetProcedure = "/taucorder.v1.MonkeyService/Get"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	monkeyServiceServiceDescriptor    = v1.File_taucorder_v1_monkey_proto.Services().ByName("MonkeyService")
	monkeyServiceListMethodDescriptor = monkeyServiceServiceDescriptor.Methods().ByName("List")
	monkeyServiceGetMethodDescriptor  = monkeyServiceServiceDescriptor.Methods().ByName("Get")
)

// MonkeyServiceClient is a client for the taucorder.v1.MonkeyService service.
type MonkeyServiceClient interface {
	List(context.Context, *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.Job], error)
	Get(context.Context, *connect.Request[v1.GetJobInstanceRequest]) (*connect.Response[v1.Job], error)
}

// NewMonkeyServiceClient constructs a client for the taucorder.v1.MonkeyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMonkeyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MonkeyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &monkeyServiceClient{
		list: connect.NewClient[v1.Node, v1.Job](
			httpClient,
			baseURL+MonkeyServiceListProcedure,
			connect.WithSchema(monkeyServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetJobInstanceRequest, v1.Job](
			httpClient,
			baseURL+MonkeyServiceGetProcedure,
			connect.WithSchema(monkeyServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// monkeyServiceClient implements MonkeyServiceClient.
type monkeyServiceClient struct {
	list *connect.Client[v1.Node, v1.Job]
	get  *connect.Client[v1.GetJobInstanceRequest, v1.Job]
}

// List calls taucorder.v1.MonkeyService.List.
func (c *monkeyServiceClient) List(ctx context.Context, req *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.Job], error) {
	return c.list.CallServerStream(ctx, req)
}

// Get calls taucorder.v1.MonkeyService.Get.
func (c *monkeyServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetJobInstanceRequest]) (*connect.Response[v1.Job], error) {
	return c.get.CallUnary(ctx, req)
}

// MonkeyServiceHandler is an implementation of the taucorder.v1.MonkeyService service.
type MonkeyServiceHandler interface {
	List(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.Job]) error
	Get(context.Context, *connect.Request[v1.GetJobInstanceRequest]) (*connect.Response[v1.Job], error)
}

// NewMonkeyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMonkeyServiceHandler(svc MonkeyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	monkeyServiceListHandler := connect.NewServerStreamHandler(
		MonkeyServiceListProcedure,
		svc.List,
		connect.WithSchema(monkeyServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	monkeyServiceGetHandler := connect.NewUnaryHandler(
		MonkeyServiceGetProcedure,
		svc.Get,
		connect.WithSchema(monkeyServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/taucorder.v1.MonkeyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MonkeyServiceListProcedure:
			monkeyServiceListHandler.ServeHTTP(w, r)
		case MonkeyServiceGetProcedure:
			monkeyServiceGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMonkeyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMonkeyServiceHandler struct{}

func (UnimplementedMonkeyServiceHandler) List(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.Job]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.MonkeyService.List is not implemented"))
}

func (UnimplementedMonkeyServiceHandler) Get(context.Context, *connect.Request[v1.GetJobInstanceRequest]) (*connect.Response[v1.Job], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.MonkeyService.Get is not implemented"))
}
