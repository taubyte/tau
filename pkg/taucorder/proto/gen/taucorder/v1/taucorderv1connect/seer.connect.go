// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: taucorder/v1/seer.proto

package taucorderv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/taubyte/tau/pkg/taucorder/proto/gen/taucorder/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SeerServiceName is the fully-qualified name of the SeerService service.
	SeerServiceName = "taucorder.v1.SeerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SeerServiceListProcedure is the fully-qualified name of the SeerService's List RPC.
	SeerServiceListProcedure = "/taucorder.v1.SeerService/List"
	// SeerServiceUsageProcedure is the fully-qualified name of the SeerService's Usage RPC.
	SeerServiceUsageProcedure = "/taucorder.v1.SeerService/Usage"
	// SeerServiceLocationProcedure is the fully-qualified name of the SeerService's Location RPC.
	SeerServiceLocationProcedure = "/taucorder.v1.SeerService/Location"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	seerServiceServiceDescriptor        = v1.File_taucorder_v1_seer_proto.Services().ByName("SeerService")
	seerServiceListMethodDescriptor     = seerServiceServiceDescriptor.Methods().ByName("List")
	seerServiceUsageMethodDescriptor    = seerServiceServiceDescriptor.Methods().ByName("Usage")
	seerServiceLocationMethodDescriptor = seerServiceServiceDescriptor.Methods().ByName("Location")
)

// SeerServiceClient is a client for the taucorder.v1.SeerService service.
type SeerServiceClient interface {
	List(context.Context, *connect.Request[v1.NodesListRequest]) (*connect.ServerStreamForClient[v1.Peer], error)
	Usage(context.Context, *connect.Request[v1.NodesUsageRequest]) (*connect.Response[v1.PeerUsage], error)
	Location(context.Context, *connect.Request[v1.LocationRequest]) (*connect.ServerStreamForClient[v1.PeerLocation], error)
}

// NewSeerServiceClient constructs a client for the taucorder.v1.SeerService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSeerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SeerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &seerServiceClient{
		list: connect.NewClient[v1.NodesListRequest, v1.Peer](
			httpClient,
			baseURL+SeerServiceListProcedure,
			connect.WithSchema(seerServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		usage: connect.NewClient[v1.NodesUsageRequest, v1.PeerUsage](
			httpClient,
			baseURL+SeerServiceUsageProcedure,
			connect.WithSchema(seerServiceUsageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		location: connect.NewClient[v1.LocationRequest, v1.PeerLocation](
			httpClient,
			baseURL+SeerServiceLocationProcedure,
			connect.WithSchema(seerServiceLocationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// seerServiceClient implements SeerServiceClient.
type seerServiceClient struct {
	list     *connect.Client[v1.NodesListRequest, v1.Peer]
	usage    *connect.Client[v1.NodesUsageRequest, v1.PeerUsage]
	location *connect.Client[v1.LocationRequest, v1.PeerLocation]
}

// List calls taucorder.v1.SeerService.List.
func (c *seerServiceClient) List(ctx context.Context, req *connect.Request[v1.NodesListRequest]) (*connect.ServerStreamForClient[v1.Peer], error) {
	return c.list.CallServerStream(ctx, req)
}

// Usage calls taucorder.v1.SeerService.Usage.
func (c *seerServiceClient) Usage(ctx context.Context, req *connect.Request[v1.NodesUsageRequest]) (*connect.Response[v1.PeerUsage], error) {
	return c.usage.CallUnary(ctx, req)
}

// Location calls taucorder.v1.SeerService.Location.
func (c *seerServiceClient) Location(ctx context.Context, req *connect.Request[v1.LocationRequest]) (*connect.ServerStreamForClient[v1.PeerLocation], error) {
	return c.location.CallServerStream(ctx, req)
}

// SeerServiceHandler is an implementation of the taucorder.v1.SeerService service.
type SeerServiceHandler interface {
	List(context.Context, *connect.Request[v1.NodesListRequest], *connect.ServerStream[v1.Peer]) error
	Usage(context.Context, *connect.Request[v1.NodesUsageRequest]) (*connect.Response[v1.PeerUsage], error)
	Location(context.Context, *connect.Request[v1.LocationRequest], *connect.ServerStream[v1.PeerLocation]) error
}

// NewSeerServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSeerServiceHandler(svc SeerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	seerServiceListHandler := connect.NewServerStreamHandler(
		SeerServiceListProcedure,
		svc.List,
		connect.WithSchema(seerServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	seerServiceUsageHandler := connect.NewUnaryHandler(
		SeerServiceUsageProcedure,
		svc.Usage,
		connect.WithSchema(seerServiceUsageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	seerServiceLocationHandler := connect.NewServerStreamHandler(
		SeerServiceLocationProcedure,
		svc.Location,
		connect.WithSchema(seerServiceLocationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/taucorder.v1.SeerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SeerServiceListProcedure:
			seerServiceListHandler.ServeHTTP(w, r)
		case SeerServiceUsageProcedure:
			seerServiceUsageHandler.ServeHTTP(w, r)
		case SeerServiceLocationProcedure:
			seerServiceLocationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSeerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSeerServiceHandler struct{}

func (UnimplementedSeerServiceHandler) List(context.Context, *connect.Request[v1.NodesListRequest], *connect.ServerStream[v1.Peer]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.SeerService.List is not implemented"))
}

func (UnimplementedSeerServiceHandler) Usage(context.Context, *connect.Request[v1.NodesUsageRequest]) (*connect.Response[v1.PeerUsage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.SeerService.Usage is not implemented"))
}

func (UnimplementedSeerServiceHandler) Location(context.Context, *connect.Request[v1.LocationRequest], *connect.ServerStream[v1.PeerLocation]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.SeerService.Location is not implemented"))
}
