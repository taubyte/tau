// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: taucorder/v1/node.proto

package taucorderv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/taubyte/tau/pkg/taucorder/proto/gen/taucorder/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NodeServiceName is the fully-qualified name of the NodeService service.
	NodeServiceName = "taucorder.v1.NodeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NodeServiceNewProcedure is the fully-qualified name of the NodeService's New RPC.
	NodeServiceNewProcedure = "/taucorder.v1.NodeService/New"
	// NodeServiceFreeProcedure is the fully-qualified name of the NodeService's Free RPC.
	NodeServiceFreeProcedure = "/taucorder.v1.NodeService/Free"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	nodeServiceServiceDescriptor    = v1.File_taucorder_v1_node_proto.Services().ByName("NodeService")
	nodeServiceNewMethodDescriptor  = nodeServiceServiceDescriptor.Methods().ByName("New")
	nodeServiceFreeMethodDescriptor = nodeServiceServiceDescriptor.Methods().ByName("Free")
)

// NodeServiceClient is a client for the taucorder.v1.NodeService service.
type NodeServiceClient interface {
	New(context.Context, *connect.Request[v1.Config]) (*connect.Response[v1.Node], error)
	Free(context.Context, *connect.Request[v1.Node]) (*connect.Response[v1.Empty], error)
}

// NewNodeServiceClient constructs a client for the taucorder.v1.NodeService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNodeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NodeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &nodeServiceClient{
		new: connect.NewClient[v1.Config, v1.Node](
			httpClient,
			baseURL+NodeServiceNewProcedure,
			connect.WithSchema(nodeServiceNewMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		free: connect.NewClient[v1.Node, v1.Empty](
			httpClient,
			baseURL+NodeServiceFreeProcedure,
			connect.WithSchema(nodeServiceFreeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// nodeServiceClient implements NodeServiceClient.
type nodeServiceClient struct {
	new  *connect.Client[v1.Config, v1.Node]
	free *connect.Client[v1.Node, v1.Empty]
}

// New calls taucorder.v1.NodeService.New.
func (c *nodeServiceClient) New(ctx context.Context, req *connect.Request[v1.Config]) (*connect.Response[v1.Node], error) {
	return c.new.CallUnary(ctx, req)
}

// Free calls taucorder.v1.NodeService.Free.
func (c *nodeServiceClient) Free(ctx context.Context, req *connect.Request[v1.Node]) (*connect.Response[v1.Empty], error) {
	return c.free.CallUnary(ctx, req)
}

// NodeServiceHandler is an implementation of the taucorder.v1.NodeService service.
type NodeServiceHandler interface {
	New(context.Context, *connect.Request[v1.Config]) (*connect.Response[v1.Node], error)
	Free(context.Context, *connect.Request[v1.Node]) (*connect.Response[v1.Empty], error)
}

// NewNodeServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNodeServiceHandler(svc NodeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	nodeServiceNewHandler := connect.NewUnaryHandler(
		NodeServiceNewProcedure,
		svc.New,
		connect.WithSchema(nodeServiceNewMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	nodeServiceFreeHandler := connect.NewUnaryHandler(
		NodeServiceFreeProcedure,
		svc.Free,
		connect.WithSchema(nodeServiceFreeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/taucorder.v1.NodeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NodeServiceNewProcedure:
			nodeServiceNewHandler.ServeHTTP(w, r)
		case NodeServiceFreeProcedure:
			nodeServiceFreeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNodeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNodeServiceHandler struct{}

func (UnimplementedNodeServiceHandler) New(context.Context, *connect.Request[v1.Config]) (*connect.Response[v1.Node], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.NodeService.New is not implemented"))
}

func (UnimplementedNodeServiceHandler) Free(context.Context, *connect.Request[v1.Node]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.NodeService.Free is not implemented"))
}
