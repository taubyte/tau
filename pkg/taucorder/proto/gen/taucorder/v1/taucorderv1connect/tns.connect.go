// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: taucorder/v1/tns.proto

package taucorderv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/taubyte/tau/pkg/taucorder/proto/gen/taucorder/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TNSServiceName is the fully-qualified name of the TNSService service.
	TNSServiceName = "taucorder.v1.TNSService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TNSServiceListProcedure is the fully-qualified name of the TNSService's List RPC.
	TNSServiceListProcedure = "/taucorder.v1.TNSService/List"
	// TNSServiceFetchProcedure is the fully-qualified name of the TNSService's Fetch RPC.
	TNSServiceFetchProcedure = "/taucorder.v1.TNSService/Fetch"
	// TNSServiceLookupProcedure is the fully-qualified name of the TNSService's Lookup RPC.
	TNSServiceLookupProcedure = "/taucorder.v1.TNSService/Lookup"
	// TNSServiceStateProcedure is the fully-qualified name of the TNSService's State RPC.
	TNSServiceStateProcedure = "/taucorder.v1.TNSService/State"
	// TNSServiceStatesProcedure is the fully-qualified name of the TNSService's States RPC.
	TNSServiceStatesProcedure = "/taucorder.v1.TNSService/States"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tNSServiceServiceDescriptor      = v1.File_taucorder_v1_tns_proto.Services().ByName("TNSService")
	tNSServiceListMethodDescriptor   = tNSServiceServiceDescriptor.Methods().ByName("List")
	tNSServiceFetchMethodDescriptor  = tNSServiceServiceDescriptor.Methods().ByName("Fetch")
	tNSServiceLookupMethodDescriptor = tNSServiceServiceDescriptor.Methods().ByName("Lookup")
	tNSServiceStateMethodDescriptor  = tNSServiceServiceDescriptor.Methods().ByName("State")
	tNSServiceStatesMethodDescriptor = tNSServiceServiceDescriptor.Methods().ByName("States")
)

// TNSServiceClient is a client for the taucorder.v1.TNSService service.
type TNSServiceClient interface {
	List(context.Context, *connect.Request[v1.TNSListRequest]) (*connect.ServerStreamForClient[v1.TNSPath], error)
	Fetch(context.Context, *connect.Request[v1.TNSFetchRequest]) (*connect.Response[v1.TNSObject], error)
	Lookup(context.Context, *connect.Request[v1.TNSLookupRequest]) (*connect.Response[v1.TNSPaths], error)
	State(context.Context, *connect.Request[v1.ConsensusStateRequest]) (*connect.Response[v1.ConsensusState], error)
	States(context.Context, *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.ConsensusState], error)
}

// NewTNSServiceClient constructs a client for the taucorder.v1.TNSService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTNSServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TNSServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tNSServiceClient{
		list: connect.NewClient[v1.TNSListRequest, v1.TNSPath](
			httpClient,
			baseURL+TNSServiceListProcedure,
			connect.WithSchema(tNSServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fetch: connect.NewClient[v1.TNSFetchRequest, v1.TNSObject](
			httpClient,
			baseURL+TNSServiceFetchProcedure,
			connect.WithSchema(tNSServiceFetchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		lookup: connect.NewClient[v1.TNSLookupRequest, v1.TNSPaths](
			httpClient,
			baseURL+TNSServiceLookupProcedure,
			connect.WithSchema(tNSServiceLookupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		state: connect.NewClient[v1.ConsensusStateRequest, v1.ConsensusState](
			httpClient,
			baseURL+TNSServiceStateProcedure,
			connect.WithSchema(tNSServiceStateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		states: connect.NewClient[v1.Node, v1.ConsensusState](
			httpClient,
			baseURL+TNSServiceStatesProcedure,
			connect.WithSchema(tNSServiceStatesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// tNSServiceClient implements TNSServiceClient.
type tNSServiceClient struct {
	list   *connect.Client[v1.TNSListRequest, v1.TNSPath]
	fetch  *connect.Client[v1.TNSFetchRequest, v1.TNSObject]
	lookup *connect.Client[v1.TNSLookupRequest, v1.TNSPaths]
	state  *connect.Client[v1.ConsensusStateRequest, v1.ConsensusState]
	states *connect.Client[v1.Node, v1.ConsensusState]
}

// List calls taucorder.v1.TNSService.List.
func (c *tNSServiceClient) List(ctx context.Context, req *connect.Request[v1.TNSListRequest]) (*connect.ServerStreamForClient[v1.TNSPath], error) {
	return c.list.CallServerStream(ctx, req)
}

// Fetch calls taucorder.v1.TNSService.Fetch.
func (c *tNSServiceClient) Fetch(ctx context.Context, req *connect.Request[v1.TNSFetchRequest]) (*connect.Response[v1.TNSObject], error) {
	return c.fetch.CallUnary(ctx, req)
}

// Lookup calls taucorder.v1.TNSService.Lookup.
func (c *tNSServiceClient) Lookup(ctx context.Context, req *connect.Request[v1.TNSLookupRequest]) (*connect.Response[v1.TNSPaths], error) {
	return c.lookup.CallUnary(ctx, req)
}

// State calls taucorder.v1.TNSService.State.
func (c *tNSServiceClient) State(ctx context.Context, req *connect.Request[v1.ConsensusStateRequest]) (*connect.Response[v1.ConsensusState], error) {
	return c.state.CallUnary(ctx, req)
}

// States calls taucorder.v1.TNSService.States.
func (c *tNSServiceClient) States(ctx context.Context, req *connect.Request[v1.Node]) (*connect.ServerStreamForClient[v1.ConsensusState], error) {
	return c.states.CallServerStream(ctx, req)
}

// TNSServiceHandler is an implementation of the taucorder.v1.TNSService service.
type TNSServiceHandler interface {
	List(context.Context, *connect.Request[v1.TNSListRequest], *connect.ServerStream[v1.TNSPath]) error
	Fetch(context.Context, *connect.Request[v1.TNSFetchRequest]) (*connect.Response[v1.TNSObject], error)
	Lookup(context.Context, *connect.Request[v1.TNSLookupRequest]) (*connect.Response[v1.TNSPaths], error)
	State(context.Context, *connect.Request[v1.ConsensusStateRequest]) (*connect.Response[v1.ConsensusState], error)
	States(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.ConsensusState]) error
}

// NewTNSServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTNSServiceHandler(svc TNSServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tNSServiceListHandler := connect.NewServerStreamHandler(
		TNSServiceListProcedure,
		svc.List,
		connect.WithSchema(tNSServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tNSServiceFetchHandler := connect.NewUnaryHandler(
		TNSServiceFetchProcedure,
		svc.Fetch,
		connect.WithSchema(tNSServiceFetchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tNSServiceLookupHandler := connect.NewUnaryHandler(
		TNSServiceLookupProcedure,
		svc.Lookup,
		connect.WithSchema(tNSServiceLookupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tNSServiceStateHandler := connect.NewUnaryHandler(
		TNSServiceStateProcedure,
		svc.State,
		connect.WithSchema(tNSServiceStateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tNSServiceStatesHandler := connect.NewServerStreamHandler(
		TNSServiceStatesProcedure,
		svc.States,
		connect.WithSchema(tNSServiceStatesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/taucorder.v1.TNSService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TNSServiceListProcedure:
			tNSServiceListHandler.ServeHTTP(w, r)
		case TNSServiceFetchProcedure:
			tNSServiceFetchHandler.ServeHTTP(w, r)
		case TNSServiceLookupProcedure:
			tNSServiceLookupHandler.ServeHTTP(w, r)
		case TNSServiceStateProcedure:
			tNSServiceStateHandler.ServeHTTP(w, r)
		case TNSServiceStatesProcedure:
			tNSServiceStatesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTNSServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTNSServiceHandler struct{}

func (UnimplementedTNSServiceHandler) List(context.Context, *connect.Request[v1.TNSListRequest], *connect.ServerStream[v1.TNSPath]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.TNSService.List is not implemented"))
}

func (UnimplementedTNSServiceHandler) Fetch(context.Context, *connect.Request[v1.TNSFetchRequest]) (*connect.Response[v1.TNSObject], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.TNSService.Fetch is not implemented"))
}

func (UnimplementedTNSServiceHandler) Lookup(context.Context, *connect.Request[v1.TNSLookupRequest]) (*connect.Response[v1.TNSPaths], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.TNSService.Lookup is not implemented"))
}

func (UnimplementedTNSServiceHandler) State(context.Context, *connect.Request[v1.ConsensusStateRequest]) (*connect.Response[v1.ConsensusState], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.TNSService.State is not implemented"))
}

func (UnimplementedTNSServiceHandler) States(context.Context, *connect.Request[v1.Node], *connect.ServerStream[v1.ConsensusState]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("taucorder.v1.TNSService.States is not implemented"))
}
