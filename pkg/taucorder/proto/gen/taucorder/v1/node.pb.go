// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: taucorder/v1/node.proto

package taucorderv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Data Structures
type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Auto bool   `protobuf:"varint,2,opt,name=auto,proto3" json:"auto,omitempty"` // falls back to auto if true
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_node_proto_rawDescGZIP(), []int{0}
}

func (x *Link) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Link) GetAuto() bool {
	if x != nil {
		return x.Auto
	}
	return false
}

type SporeDrive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId string `protobuf:"bytes,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Connect  *Link  `protobuf:"bytes,2,opt,name=connect,proto3" json:"connect,omitempty"`
}

func (x *SporeDrive) Reset() {
	*x = SporeDrive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SporeDrive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SporeDrive) ProtoMessage() {}

func (x *SporeDrive) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SporeDrive.ProtoReflect.Descriptor instead.
func (*SporeDrive) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_node_proto_rawDescGZIP(), []int{1}
}

func (x *SporeDrive) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *SporeDrive) GetConnect() *Link {
	if x != nil {
		return x.Connect
	}
	return nil
}

type Dream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Universe string `protobuf:"bytes,1,opt,name=universe,proto3" json:"universe,omitempty"`
	Connect  *Link  `protobuf:"bytes,2,opt,name=connect,proto3" json:"connect,omitempty"`
	SwarmKey []byte `protobuf:"bytes,3,opt,name=swarm_key,json=swarmKey,proto3" json:"swarm_key,omitempty"`
	// Types that are assignable to Bootstrap:
	//
	//	*Dream_Disable
	//	*Dream_Addresses
	//	*Dream_SubsetPercentage
	//	*Dream_SubsetCount
	Bootstrap isDream_Bootstrap `protobuf_oneof:"bootstrap"`
}

func (x *Dream) Reset() {
	*x = Dream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dream) ProtoMessage() {}

func (x *Dream) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dream.ProtoReflect.Descriptor instead.
func (*Dream) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_node_proto_rawDescGZIP(), []int{2}
}

func (x *Dream) GetUniverse() string {
	if x != nil {
		return x.Universe
	}
	return ""
}

func (x *Dream) GetConnect() *Link {
	if x != nil {
		return x.Connect
	}
	return nil
}

func (x *Dream) GetSwarmKey() []byte {
	if x != nil {
		return x.SwarmKey
	}
	return nil
}

func (m *Dream) GetBootstrap() isDream_Bootstrap {
	if m != nil {
		return m.Bootstrap
	}
	return nil
}

func (x *Dream) GetDisable() bool {
	if x, ok := x.GetBootstrap().(*Dream_Disable); ok {
		return x.Disable
	}
	return false
}

func (x *Dream) GetAddresses() *Addresses {
	if x, ok := x.GetBootstrap().(*Dream_Addresses); ok {
		return x.Addresses
	}
	return nil
}

func (x *Dream) GetSubsetPercentage() float32 {
	if x, ok := x.GetBootstrap().(*Dream_SubsetPercentage); ok {
		return x.SubsetPercentage
	}
	return 0
}

func (x *Dream) GetSubsetCount() int32 {
	if x, ok := x.GetBootstrap().(*Dream_SubsetCount); ok {
		return x.SubsetCount
	}
	return 0
}

type isDream_Bootstrap interface {
	isDream_Bootstrap()
}

type Dream_Disable struct {
	Disable bool `protobuf:"varint,4,opt,name=disable,proto3,oneof"`
}

type Dream_Addresses struct {
	Addresses *Addresses `protobuf:"bytes,5,opt,name=addresses,proto3,oneof"`
}

type Dream_SubsetPercentage struct {
	SubsetPercentage float32 `protobuf:"fixed32,6,opt,name=subset_percentage,json=subsetPercentage,proto3,oneof"` // [0,1] subset of nodes when connecting
}

type Dream_SubsetCount struct {
	SubsetCount int32 `protobuf:"varint,7,opt,name=subset_count,json=subsetCount,proto3,oneof"` // subset of nodes when connecting
}

func (*Dream_Disable) isDream_Bootstrap() {}

func (*Dream_Addresses) isDream_Bootstrap() {}

func (*Dream_SubsetPercentage) isDream_Bootstrap() {}

func (*Dream_SubsetCount) isDream_Bootstrap() {}

type Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwarmKey []byte   `protobuf:"bytes,1,opt,name=swarm_key,json=swarmKey,proto3" json:"swarm_key,omitempty"`
	Peers    []string `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *Raw) Reset() {
	*x = Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raw) ProtoMessage() {}

func (x *Raw) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raw.ProtoReflect.Descriptor instead.
func (*Raw) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_node_proto_rawDescGZIP(), []int{3}
}

func (x *Raw) GetSwarmKey() []byte {
	if x != nil {
		return x.SwarmKey
	}
	return nil
}

func (x *Raw) GetPeers() []string {
	if x != nil {
		return x.Peers
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//
	//	*Config_Cloud
	//	*Config_Universe
	//	*Config_Raw
	Source     isConfig_Source `protobuf_oneof:"source"`
	PrivateKey []byte          `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taucorder_v1_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_taucorder_v1_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_taucorder_v1_node_proto_rawDescGZIP(), []int{4}
}

func (m *Config) GetSource() isConfig_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Config) GetCloud() *SporeDrive {
	if x, ok := x.GetSource().(*Config_Cloud); ok {
		return x.Cloud
	}
	return nil
}

func (x *Config) GetUniverse() *Dream {
	if x, ok := x.GetSource().(*Config_Universe); ok {
		return x.Universe
	}
	return nil
}

func (x *Config) GetRaw() *Raw {
	if x, ok := x.GetSource().(*Config_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Config) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type isConfig_Source interface {
	isConfig_Source()
}

type Config_Cloud struct {
	Cloud *SporeDrive `protobuf:"bytes,1,opt,name=cloud,proto3,oneof"`
}

type Config_Universe struct {
	Universe *Dream `protobuf:"bytes,2,opt,name=universe,proto3,oneof"`
}

type Config_Raw struct {
	Raw *Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

func (*Config_Cloud) isConfig_Source() {}

func (*Config_Universe) isConfig_Source() {}

func (*Config_Raw) isConfig_Source() {}

var File_taucorder_v1_node_proto protoreflect.FileDescriptor

var file_taucorder_v1_node_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x61, 0x75, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f,
	0x22, 0x57, 0x0a, 0x0a, 0x53, 0x70, 0x6f, 0x72, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x22, 0xa4, 0x02, 0x0a, 0x05, 0x44, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x75, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x10, 0x73, 0x75,
	0x62, 0x73, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x22, 0x38, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x72, 0x6d,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x77, 0x61, 0x72,
	0x6d, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x75, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x00,
	0x52, 0x08, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x72, 0x61,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61,
	0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x6f, 0x0a, 0x0b,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x4e,
	0x65, 0x77, 0x12, 0x14, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x12, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x46, 0x72, 0x65, 0x65, 0x12, 0x12, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x13, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0xb7, 0x01,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x42, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x61, 0x75, 0x62,
	0x79, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x75, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x61, 0x75, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x74, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x61, 0x75,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02,
	0x0c, 0x54, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c,
	0x54, 0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x54,
	0x61, 0x75, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x54, 0x61, 0x75, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_taucorder_v1_node_proto_rawDescOnce sync.Once
	file_taucorder_v1_node_proto_rawDescData = file_taucorder_v1_node_proto_rawDesc
)

func file_taucorder_v1_node_proto_rawDescGZIP() []byte {
	file_taucorder_v1_node_proto_rawDescOnce.Do(func() {
		file_taucorder_v1_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_taucorder_v1_node_proto_rawDescData)
	})
	return file_taucorder_v1_node_proto_rawDescData
}

var file_taucorder_v1_node_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_taucorder_v1_node_proto_goTypes = []any{
	(*Link)(nil),       // 0: taucorder.v1.Link
	(*SporeDrive)(nil), // 1: taucorder.v1.SporeDrive
	(*Dream)(nil),      // 2: taucorder.v1.Dream
	(*Raw)(nil),        // 3: taucorder.v1.Raw
	(*Config)(nil),     // 4: taucorder.v1.Config
	(*Addresses)(nil),  // 5: taucorder.v1.Addresses
	(*Node)(nil),       // 6: taucorder.v1.Node
	(*Empty)(nil),      // 7: taucorder.v1.Empty
}
var file_taucorder_v1_node_proto_depIdxs = []int32{
	0, // 0: taucorder.v1.SporeDrive.connect:type_name -> taucorder.v1.Link
	0, // 1: taucorder.v1.Dream.connect:type_name -> taucorder.v1.Link
	5, // 2: taucorder.v1.Dream.addresses:type_name -> taucorder.v1.Addresses
	1, // 3: taucorder.v1.Config.cloud:type_name -> taucorder.v1.SporeDrive
	2, // 4: taucorder.v1.Config.universe:type_name -> taucorder.v1.Dream
	3, // 5: taucorder.v1.Config.raw:type_name -> taucorder.v1.Raw
	4, // 6: taucorder.v1.NodeService.New:input_type -> taucorder.v1.Config
	6, // 7: taucorder.v1.NodeService.Free:input_type -> taucorder.v1.Node
	6, // 8: taucorder.v1.NodeService.New:output_type -> taucorder.v1.Node
	7, // 9: taucorder.v1.NodeService.Free:output_type -> taucorder.v1.Empty
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_taucorder_v1_node_proto_init() }
func file_taucorder_v1_node_proto_init() {
	if File_taucorder_v1_node_proto != nil {
		return
	}
	file_taucorder_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_taucorder_v1_node_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taucorder_v1_node_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SporeDrive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taucorder_v1_node_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Dream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taucorder_v1_node_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taucorder_v1_node_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_taucorder_v1_node_proto_msgTypes[2].OneofWrappers = []any{
		(*Dream_Disable)(nil),
		(*Dream_Addresses)(nil),
		(*Dream_SubsetPercentage)(nil),
		(*Dream_SubsetCount)(nil),
	}
	file_taucorder_v1_node_proto_msgTypes[4].OneofWrappers = []any{
		(*Config_Cloud)(nil),
		(*Config_Universe)(nil),
		(*Config_Raw)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_taucorder_v1_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_taucorder_v1_node_proto_goTypes,
		DependencyIndexes: file_taucorder_v1_node_proto_depIdxs,
		MessageInfos:      file_taucorder_v1_node_proto_msgTypes,
	}.Build()
	File_taucorder_v1_node_proto = out.File
	file_taucorder_v1_node_proto_rawDesc = nil
	file_taucorder_v1_node_proto_goTypes = nil
	file_taucorder_v1_node_proto_depIdxs = nil
}
