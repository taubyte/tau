package service

import (
	"context"
	"errors"
	"fmt"

	"github.com/taubyte/odo/protocols/auth/service/hooks"
	"github.com/taubyte/odo/protocols/auth/service/projects"
	"github.com/taubyte/odo/protocols/auth/service/repositories"
	cmd "bitbucket.org/taubyte/p2p/streams/command"
	cr "bitbucket.org/taubyte/p2p/streams/command/response"
	"github.com/taubyte/utils/maps"
)

/******* HOOKS ********/
func (srv *AuthService) getRepositoryHookByID(hook_id string) (cr.Response, error) {
	hook, err := hooks.Fetch(srv.db, hook_id)
	if err != nil {
		return nil, err
	}

	return cr.Response(hook.Serialize()), nil
}

func (srv *AuthService) apiHookServiceHandler(ctx context.Context, body cmd.Body) (cr.Response, error) {
	// params:
	//  TODO: add encrption key to service library
	//  action: get/set
	//  fqdn: domain name
	action, err := maps.String(body, "action")
	if err != nil {
		return nil, err
	}

	switch action {
	case "get":
		hook_id, err := maps.String(body, "id")
		if err != nil {
			return nil, err
		}
		return srv.getRepositoryHookByID(hook_id)
	default:
		return nil, errors.New("Hook action `" + action + "` not reconized.")
	}
}

/******* REPOS ********/
func (srv *AuthService) getGithubRepositoryByID(id int) (cr.Response, error) {
	repo, err := repositories.Fetch(srv.db, fmt.Sprintf("%d", id))
	if err != nil {
		return nil, err
	}

	return cr.Response(repo.Serialize()), nil
}

func (srv *AuthService) apiGitRepositoryServiceHandler(ctx context.Context, body cmd.Body) (cr.Response, error) {
	// params:
	//  TODO: add encrption key to service library
	//  action: get/set
	//  provider: github/...
	//  id
	action, err := maps.String(body, "action")
	if err != nil {
		return nil, err
	}

	switch action {
	case "get":
		provider, err := maps.String(body, "provider")
		if err != nil {
			return nil, err
		}
		switch provider {
		case "github":
			hook_id, err := maps.Int(body, "id")
			if err != nil {
				return nil, err
			}
			return srv.getGithubRepositoryByID(hook_id)
		default:
			return nil, errors.New("Repository provider `" + provider + "` not supported.")
		}
	default:
		return nil, errors.New("Repository action `" + action + "` not reconized.")
	}
}

/******* PROJECTS ********/
func (srv *AuthService) getProjectByID(id string) (cr.Response, error) {
	prj, err := projects.Fetch(srv.db, id)
	if err != nil {
		return nil, err
	}

	return cr.Response(prj.Serialize()), nil
}

func (srv *AuthService) apiProjectServiceHandler(ctx context.Context, body cmd.Body) (cr.Response, error) {
	// params:
	//  TODO: add encrption key to service library
	//  action: get/set
	//  id
	action, err := maps.String(body, "action")
	if err != nil {
		return nil, err
	}

	switch action {
	case "get":
		id, err := maps.String(body, "id")
		if err != nil {
			return nil, err
		}
		return srv.getProjectByID(id)
	default:
		return nil, errors.New("Project action `" + action + "` not reconized.")
	}
}
