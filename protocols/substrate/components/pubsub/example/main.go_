package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path"

	dreamlandCommon "github.com/taubyte/dreamland/core/common"
	dreamland "github.com/taubyte/dreamland/core/services"
	commonIface "bitbucket.org/taubyte/go-interfaces/common"
	moodyCommon "bitbucket.org/taubyte/go-moody-blues/common"
	_ "github.com/taubyte/odo/protocols/substrate"
	_ "github.com/taubyte/odo/protocols/patrick"
	tnsClient "github.com/taubyte/odo/protocols/tns/api/p2p"
)

// Ignore the repo src file
var acceptable_code_dirs = []string{"src"}
var acceptable_library_dirs = []string{"src"}

func main() {
	err := clean()
	if err != nil {
		fmt.Printf("err %v\n", err)
		return
	}

	moodyCommon.Dev = true
	dreamland.BigBang()
	u := dreamland.Multiverse("blackhole")
	defer u.Stop()

	nodeHttpPort := 8889

	err = u.StartWithConfig(&dreamlandCommon.Config{
		Services: map[string]commonIface.ServiceConfig{
			"hoarder": {},
			"tns":     {},
			"node":    {Others: map[string]int{"http": nodeHttpPort, "verbose": 1}},
			"auth":    {},
		},
		Simples: map[string]dreamlandCommon.SimpleConfig{
			"client": {
				Clients: dreamlandCommon.SimpleConfigClients{
					TNS:     &commonIface.ClientConfig{},
					Hoarder: &commonIface.ClientConfig{},
				},
			},
		},
	})
	if err != nil {
		fmt.Printf("err: %v\n", err)
		return
	}

	simple, err := u.Simple("client")
	if err != nil {
		fmt.Printf("err: %v\n", err)
		return
	}

	tnsClient := simple.TNS().(*tnsClient.Client)
	logFile, err := ioutil.TempFile("", "library_test_log.txt")
	if err != nil {
		fmt.Printf("err: %v\n", err)
		return
	}

	runForConfigRepo := getRunForConfig(u.Context(), simple, tnsClient, logFile)
	err = runForConfigRepo()
	if err != nil {
		fmt.Printf("err: %v\n", err)
		return
	}

	runForLibraryRepo := getRunForLibrary(u.Context(), simple, tnsClient, logFile)
	err = runForLibraryRepo()
	if err != nil {
		fmt.Printf("err: %v\n", err)
		return
	}

	runForCodeRepo := getRunForCode(u.Context(), simple, tnsClient, logFile)
	err = runForCodeRepo()
	if err != nil {
		fmt.Printf("err: %v\n", err)
		return
	}

	runForWebsiteRepo := getRunForWebsite(u.Context(), simple, tnsClient, logFile)
	err = runForWebsiteRepo()
	if err != nil {
		fmt.Printf("err: %v\n", err)
		return
	}

	fmt.Println("\n\n\nPress [enter] to close")
	fmt.Scanln()
}

func clean() error {
	if _, err := os.Stat("src_config"); err == nil {
		dirs, err := os.ReadDir("src_config")
		if err != nil {
			return err
		}

		for _, dir := range dirs {
			found := false
			for _, _dir := range acceptable_code_dirs {
				if _dir == dir.Name() {
					found = true
				}
			}

			if !found {
				os.RemoveAll(path.Join("src_config", dir.Name()))
			}
		}
	}

	if _, err := os.Stat("src_code"); err == nil {
		dirs, err := os.ReadDir("src_code")
		if err != nil {
			return err
		}

		for _, dir := range dirs {
			found := false
			for _, _dir := range acceptable_code_dirs {
				if _dir == dir.Name() {
					found = true
				}
			}

			if !found {
				os.RemoveAll(path.Join("src_code", dir.Name()))
			}
		}
	}

	if _, err := os.Stat("src_library"); err == nil {
		dirs, err := os.ReadDir("src_library")
		if err != nil {
			return err
		}

		for _, dir := range dirs {
			found := false
			for _, _dir := range acceptable_library_dirs {
				if _dir == dir.Name() {
					found = true
				}
			}

			if !found {
				os.RemoveAll(path.Join("src_library", dir.Name()))
			}
		}
	}

	return nil
}
